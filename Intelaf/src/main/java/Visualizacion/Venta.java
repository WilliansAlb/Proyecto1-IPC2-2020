/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Visualizacion;

import Base.ClienteDAO;
import Util.*;
import Base.ConectorBD;
import Base.ProductoDAO;
import Base.TiendaDAO;
import POJOS.ClienteDTO;
import POJOS.ProductoDTO;
import POJOS.TiendaDTO;
import com.toedter.calendar.JDateChooser;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import static java.lang.Math.abs;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFormattedTextField.AbstractFormatter;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author yelbetto
 */
public class Venta extends javax.swing.JPanel {

    ConectorBD base = new ConectorBD();
    ArrayList<TiendaDTO> tiendas = new ArrayList<>();
    ArrayList<ClienteDTO> clientes = new ArrayList<>();
    ArrayList<ProductoDTO> todos_los_productos = new ArrayList<>();
    Ventana actual;
    private String tienda_actual = "";
    private Date fecha_actual;
    Utilidad util = new Utilidad();

    /**
     * Creates new form Venta
     *
     * @param actual recibe la ventana madre
     */
    public Venta(Ventana actual) {
        initComponents();
        this.actual = actual;
        DocumentListener dl;
        dl = new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateFieldState();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateFieldState();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                updateFieldState();
            }

            protected void updateFieldState() {
                if (jtf_nit.getText().length() == 8) {
                    System.out.println("ingreso un nit a comprobar");
                }
            }
        };
        jtf_nit.getDocument().addDocumentListener(dl);
        TextPrompt tp_buscar = new TextPrompt("Ingresa codigo o nombre", jtf_buscar_venta);
        tp_buscar.changeStyle(2);
        TextPrompt tp_buscar2 = new TextPrompt("Ingresa codigo o nombre", jtf_existencia_producto);
        tp_buscar2.changeStyle(2);
        if (base.conectar()) {
            ClienteDAO cl = new ClienteDAO(base);
            clientes = cl.obtener_clientes();
        }
        jl_aviso_venta.setVisible(false);
        jtf_temporal_existencias.setVisible(false);
        jl_temporal_existencias.setVisible(false);
        jl_aviso.setVisible(false);
        btn_agregar_mas.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jt_venta_productos = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jcb_venta_producto = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jtf_buscar_venta = new javax.swing.JTextField();
        btn_agregar_venta = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jl_existencia_venta = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jl_precio_venta = new javax.swing.JTextField();
        btn_terminar_venta = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jtf_cantidad_venta = new javax.swing.JTextField();
        jl_aviso_venta = new javax.swing.JLabel();
        btn_eliminar_venta = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jl_total_venta = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jtf_existencia_producto = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jcb_filtrar_tienda = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jt_existencias = new javax.swing.JTable();
        btn_agregar = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jl_temporal_existencias = new javax.swing.JLabel();
        jtf_temporal_existencias = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jtf_producto = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jt_pedidos = new javax.swing.JTable();
        btn_terminar_pedido = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jtf_id = new javax.swing.JTextField();
        jtf_existencia = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jtf_tienda = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jtf_precio = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jtf_cantidad = new javax.swing.JTextField();
        btn_agregar_pedido = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jl_aviso = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jl_total_pedido = new javax.swing.JLabel();
        btn_eliminar_pedido = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jl_nit = new javax.swing.JLabel();
        jtf_nit = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jtf_nombre_cliente = new javax.swing.JTextField();
        jtf_direccion_cliente = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jl_credito = new javax.swing.JLabel();
        jtf_credito = new javax.swing.JTextField();
        btn_agregar_mas = new javax.swing.JButton();

        jt_venta_productos.setBackground(new java.awt.Color(43, 247, 200));
        jt_venta_productos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Codigo", "Nombre", "Precio Unitario", "Cantidad", "Total"
            }
        ));
        jt_venta_productos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jt_venta_productosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jt_venta_productos);

        jLabel5.setText("Producto:");

        jcb_venta_producto.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcb_venta_productoItemStateChanged(evt);
            }
        });

        jLabel9.setText("Buscar producto:");

        jtf_buscar_venta.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtf_buscar_venta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_buscar_ventaKeyReleased(evt);
            }
        });

        btn_agregar_venta.setText("AGREGAR");
        btn_agregar_venta.setEnabled(false);
        btn_agregar_venta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_agregar_ventaActionPerformed(evt);
            }
        });

        jLabel14.setText("Existencia:");

        jl_existencia_venta.setEditable(false);
        jl_existencia_venta.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jl_existencia_venta.setEnabled(false);

        jLabel15.setText("Precio:");

        jl_precio_venta.setEditable(false);
        jl_precio_venta.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jl_precio_venta.setEnabled(false);

        btn_terminar_venta.setText("TERMINAR VENTA");
        btn_terminar_venta.setEnabled(false);
        btn_terminar_venta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_terminar_ventaActionPerformed(evt);
            }
        });

        jLabel4.setText("Cantidad:");

        jtf_cantidad_venta.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtf_cantidad_venta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_cantidad_ventaKeyReleased(evt);
            }
        });

        jl_aviso_venta.setForeground(new java.awt.Color(204, 51, 0));
        jl_aviso_venta.setText("X");

        btn_eliminar_venta.setText("ELIMINAR PRODUCTO");
        btn_eliminar_venta.setEnabled(false);
        btn_eliminar_venta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_eliminar_ventaActionPerformed(evt);
            }
        });

        jLabel10.setText("Total venta:");

        jl_total_venta.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_total_venta.setText("0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jl_existencia_venta, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jl_precio_venta, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtf_cantidad_venta, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jl_aviso_venta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_agregar_venta))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jcb_venta_producto, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtf_buscar_venta, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(btn_eliminar_venta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_terminar_venta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jl_total_venta, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jcb_venta_producto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jtf_buscar_venta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_agregar_venta)
                    .addComponent(jLabel14)
                    .addComponent(jl_existencia_venta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(jl_precio_venta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jtf_cantidad_venta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jl_aviso_venta))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_eliminar_venta)
                    .addComponent(btn_terminar_venta)
                    .addComponent(jLabel10)
                    .addComponent(jl_total_venta)))
        );

        jTabbedPane1.addTab("Venta", jPanel1);

        jLabel6.setText("Producto:");

        jtf_existencia_producto.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtf_existencia_producto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_existencia_productoKeyReleased(evt);
            }
        });

        jLabel8.setText("Filtrar por tienda:");

        jcb_filtrar_tienda.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TODAS", "TIENDA ACTUAL", "TIENDA ESPECIFICA" }));
        jcb_filtrar_tienda.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcb_filtrar_tiendaItemStateChanged(evt);
            }
        });

        jt_existencias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Codigo", "Nombre", "Fabricante", "Precio", "Tienda", "Cantidad"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jt_existencias.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jt_existenciasMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jt_existencias);

        btn_agregar.setText("AGREGAR A VENTA");
        btn_agregar.setEnabled(false);
        btn_agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_agregarActionPerformed(evt);
            }
        });

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("LISTADO PRODUCTOS");

        jl_temporal_existencias.setText("TEMPORAL");

        jtf_temporal_existencias.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_temporal_existenciasKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtf_existencia_producto))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcb_filtrar_tienda, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jl_temporal_existencias)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtf_temporal_existencias, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btn_agregar))
            .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jtf_existencia_producto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jcb_filtrar_tienda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jl_temporal_existencias)
                    .addComponent(jtf_temporal_existencias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_agregar))
        );

        jTabbedPane1.addTab("Buscar/Realizar pedido", jPanel2);

        jLabel11.setText("Producto:");

        jtf_producto.setEditable(false);
        jtf_producto.setEnabled(false);

        jLabel12.setText("Existencia:");

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Lista de pedidos");

        jt_pedidos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Producto", "Tienda", "Cantidad", "Precio", "Total"
            }
        ));
        jt_pedidos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jt_pedidosMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jt_pedidos);

        btn_terminar_pedido.setText("TERMINAR PEDIDO");
        btn_terminar_pedido.setEnabled(false);
        btn_terminar_pedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_terminar_pedidoActionPerformed(evt);
            }
        });

        jLabel17.setText("ID existencia:");

        jtf_id.setEditable(false);
        jtf_id.setEnabled(false);

        jtf_existencia.setEditable(false);
        jtf_existencia.setEnabled(false);

        jLabel19.setText("Tienda donde se solicitará");

        jtf_tienda.setEditable(false);
        jtf_tienda.setEnabled(false);

        jLabel20.setText("Precio:");

        jtf_precio.setEditable(false);
        jtf_precio.setEnabled(false);

        jLabel21.setText("Cantidad:");

        jtf_cantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_cantidadKeyReleased(evt);
            }
        });

        btn_agregar_pedido.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        btn_agregar_pedido.setText("AGREGAR");
        btn_agregar_pedido.setEnabled(false);
        btn_agregar_pedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_agregar_pedidoActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jButton2.setText("CANCELAR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jl_aviso.setText("X");

        jLabel18.setText("Total pedidos:");

        jl_total_pedido.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_total_pedido.setText("0");

        btn_eliminar_pedido.setText("ELIMINAR PEDIDO");
        btn_eliminar_pedido.setEnabled(false);
        btn_eliminar_pedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_eliminar_pedidoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17)
                    .addComponent(jLabel12)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jtf_existencia, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(jtf_id))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtf_producto))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel19)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtf_tienda))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jtf_precio, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtf_cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jl_aviso, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_agregar_pedido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(btn_eliminar_pedido)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_terminar_pedido)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jl_total_pedido, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jtf_producto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(jtf_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_existencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel19)
                    .addComponent(jtf_tienda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_precio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20)
                    .addComponent(jLabel21)
                    .addComponent(jtf_cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_agregar_pedido)
                    .addComponent(jButton2)
                    .addComponent(jl_aviso))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_terminar_pedido)
                    .addComponent(jLabel18)
                    .addComponent(jl_total_pedido)
                    .addComponent(btn_eliminar_pedido)))
        );

        jTabbedPane1.addTab("Lista de pedidos", jPanel3);

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ATENCION AL CLIENTE");

        jl_nit.setText("NIT:");

        jtf_nit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_nitKeyReleased(evt);
            }
        });

        jLabel3.setText("Nombre:");

        jtf_nombre_cliente.setEnabled(false);
        jtf_nombre_cliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_nombre_clienteKeyReleased(evt);
            }
        });

        jtf_direccion_cliente.setEnabled(false);
        jtf_direccion_cliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_direccion_clienteKeyReleased(evt);
            }
        });

        jLabel2.setText("Telefono:");

        jl_credito.setText("Credito:");

        jtf_credito.setEnabled(false);

        btn_agregar_mas.setFont(new java.awt.Font("Dialog", 1, 8)); // NOI18N
        btn_agregar_mas.setText("VER MAS");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jl_nit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtf_nit, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtf_nombre_cliente))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtf_direccion_cliente)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jl_credito)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtf_credito, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_agregar_mas))))
                    .addComponent(jTabbedPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_nit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jl_nit)
                    .addComponent(jtf_nombre_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_direccion_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jl_credito)
                    .addComponent(jtf_credito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_agregar_mas))
                .addGap(8, 8, 8)
                .addComponent(jTabbedPane1))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jcb_venta_productoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcb_venta_productoItemStateChanged
        cambiar_producto();
    }//GEN-LAST:event_jcb_venta_productoItemStateChanged

    private void jtf_buscar_ventaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_buscar_ventaKeyReleased
        JComboBox j = jcb_venta_producto;
        int pos = 0;
        boolean existe = false;
        for (int i = 0; i < j.getItemCount(); i++) {
            if (j.getItemAt(i).toString().toUpperCase().contains(jtf_buscar_venta.getText().toUpperCase())) {
                pos = i;
                existe = true;
                break;
            }
        }
        if (!existe) {
            int sin = 0;
            boolean sin2 = false;
            for (int i = 0; i < j.getItemCount(); i++) {
                if (j.getItemAt(i).toString().toUpperCase().contains("SIN EXISTENCIAS EN TIENDA")) {
                    sin = i;
                    sin2 = true;
                    break;
                }
            }
            if (sin2) {
                jcb_venta_producto.setSelectedIndex(sin);
            } else {
                jcb_venta_producto.addItem("SIN EXISTENCIAS EN TIENDA");
                jcb_venta_producto.setSelectedItem("SIN EXISTENCIAS EN TIENDA");
            }
        } else {

            jcb_venta_producto.setSelectedIndex(pos);
        }
        if (jtf_buscar_venta.getText().isEmpty()) {
            jcb_venta_producto.setSelectedIndex(0);
            jcb_venta_producto.removeItem("SIN EXISTENCIAS EN TIENDA");
        }
    }//GEN-LAST:event_jtf_buscar_ventaKeyReleased

    private void jtf_cantidad_ventaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_cantidad_ventaKeyReleased
        String e = jtf_cantidad_venta.getText();
        String tm = "";
        char c = evt.getKeyChar();
        if (evt.getKeyCode() != 8) {
            if (!Character.isDigit(c)) {
                for (int i = 0; i < e.length(); i++) {
                    if (Character.isDigit(e.charAt(i))) {
                        tm += e.charAt(i) + "";
                    }
                }
                jtf_cantidad_venta.setText(tm);
            }
        }

        if (e.length() > 0) {
            int existencia = Integer.parseInt(jl_existencia_venta.getText());

            int pos = existe_venta();

            if (pos != -1) {
                int cantidad_o = (int) jt_venta_productos.getValueAt(pos, 4);
                int cantidad1 = cantidad_o + Integer.parseInt(jtf_cantidad_venta.getText());
                if (existencia >= cantidad1) {
                    jl_aviso_venta.setVisible(false);
                    jl_aviso_venta.setToolTipText("No hay suficientes productos para realizar la venta, prueba buscar en otra tienda");
                } else {
                    jl_aviso_venta.setVisible(true);
                }
                btn_agregar_venta.setEnabled(existencia >= cantidad1);
            } else {
                int cantidad = Integer.parseInt(jtf_cantidad_venta.getText());
                if (existencia >= cantidad) {
                    jl_aviso_venta.setVisible(false);
                    jl_aviso_venta.setToolTipText("No hay suficientes productos para realizar la venta, prueba buscar en otra tienda");
                } else {
                    jl_aviso_venta.setVisible(true);
                }
                btn_agregar_venta.setEnabled(existencia >= cantidad);
            }
        } else {
            btn_agregar_venta.setEnabled(false);
        }
    }//GEN-LAST:event_jtf_cantidad_ventaKeyReleased

    private void jtf_existencia_productoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_existencia_productoKeyReleased
        rellenar_tabla_existencias(jtf_existencia_producto.getText(), jtf_temporal_existencias.getText());
    }//GEN-LAST:event_jtf_existencia_productoKeyReleased

    private void jcb_filtrar_tiendaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcb_filtrar_tiendaItemStateChanged
        String s = jcb_filtrar_tienda.getSelectedItem().toString();
        if (s.equalsIgnoreCase("TIENDA ESPECIFICA")) {
            jl_temporal_existencias.setText("TIENDA:");
            jl_temporal_existencias.setVisible(true);
            jtf_temporal_existencias.setVisible(true);
            actualizar_productos_todos();
        } else {
            jl_temporal_existencias.setVisible(false);
            jtf_temporal_existencias.setVisible(false);
            if (s.equalsIgnoreCase("TODAS")) {
                actualizar_productos_todos();
            } else {
                rellenar_tabla_existencias(jtf_existencia_producto.getText(), getTienda_actual());
            }
        }
        jtf_temporal_existencias.setText("");
    }//GEN-LAST:event_jcb_filtrar_tiendaItemStateChanged

    private void jtf_temporal_existenciasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_temporal_existenciasKeyReleased
        if (!jtf_temporal_existencias.getText().isEmpty()) {
            rellenar_tabla_existencias(jtf_existencia_producto.getText(), jtf_temporal_existencias.getText());
        } else {
            actualizar_productos_todos();
        }
    }//GEN-LAST:event_jtf_temporal_existenciasKeyReleased

    private void jt_existenciasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt_existenciasMouseClicked
        int fila = jt_existencias.getSelectedRow();
        String tienda_a = jt_existencias.getValueAt(fila, 5).toString();

        if (decodificar(tienda_a).equalsIgnoreCase(getTienda_actual())) {
            btn_agregar.setText("AGREGAR A VENTA");
        } else {
            btn_agregar.setText("REALIZAR PEDIDO");
        }
        btn_agregar.setEnabled(true);
    }//GEN-LAST:event_jt_existenciasMouseClicked

    private void btn_agregar_pedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_agregar_pedidoActionPerformed
        ProductoDTO p = new ProductoDTO();
        Utilidad utilidad = new Utilidad();
        int ex = Integer.parseInt(jtf_id.getText());
        for (ProductoDTO pro : todos_los_productos) {
            if (pro.getCodigo_existencia() == ex) {
                p = pro;
                break;
            }
        }

        if (jt_pedidos.getRowCount() > 0) {
            int pos = 0;
            boolean s = false;
            for (int i = 0; i < jt_pedidos.getRowCount(); i++) {
                String tmp = jt_pedidos.getValueAt(i, 0).toString();
                if (Integer.parseInt(tmp) == p.getCodigo_existencia()) {
                    pos = i;
                    s = true;
                    break;
                }
            }
            int pos2 = -1;
            boolean s2 = false;
            for (int i = 0; i < jt_pedidos.getRowCount(); i++) {
                String tmp = jt_pedidos.getValueAt(i, 2).toString();
                String c_tienda = decodificar(tmp);
                if (c_tienda.equalsIgnoreCase(p.getCodigo_tienda())) {
                    pos2 = i;
                    s2 = true;
                    break;
                }
            }
            if (jt_pedidos.getRowCount() > 0 && !s2) {
                utilidad.informar(null, "Tienes un pedido a otra tienda en marcha, termina ese pedido, para agregar otro a otra tienda", "INGRESO PEDIDO");
            } else {
                if (s) {
                    int cantidad_o = (int) jt_pedidos.getValueAt(pos, 3);
                    int cantidad = cantidad_o + Integer.parseInt(jtf_cantidad.getText());
                    if (Integer.parseInt(jtf_existencia.getText()) >= cantidad) {
                        jt_pedidos.setValueAt(cantidad, pos, 3);
                        jt_pedidos.setValueAt(cantidad * p.getPrecio(), pos, 5);
                        Double nuevo = Double.parseDouble(jl_total_pedido.getText()) + Integer.parseInt(jtf_cantidad.getText()) * p.getPrecio();
                        jl_total_pedido.setText(nuevo + "");
                        jtf_cantidad.setText("");
                        btn_agregar_pedido.setEnabled(false);
                        limpiar_datos_pedido();
                    } else {
                        JOptionPane.showMessageDialog(null, new JLabel("<html><body>NO SE INGRESO EL PRODUCTO A LA VENTA<br>POR NO TENER LAS EXISTENCIAS NECESARIAS</body></html>"), "ERROR", JOptionPane.OK_OPTION);
                    }
                } else {
                    rellenar_pedido(p, Integer.parseInt(jtf_cantidad.getText()));
                    btn_agregar_pedido.setEnabled(false);
                    jtf_cantidad.setText("");
                    btn_terminar_pedido.setEnabled(true);
                    limpiar_datos_pedido();
                }
            }
        } else {
            rellenar_pedido(p, Integer.parseInt(jtf_cantidad.getText()));
            btn_agregar_pedido.setEnabled(false);
            jtf_cantidad.setText("");
            if (jtf_nit.getText().isEmpty()) {
                JLabel jl = new JLabel("Ingresa el nit del cliente: ");
                JTextField jtf = new JTextField();
                JPanel jp = new JPanel();
                jp.setLayout(new GridLayout(1, 1));
                jp.add(jl);
                jp.add(jtf);
                jtf.requestFocus();
                String op = JOptionPane.showInputDialog(null, "NIT:", "");
                if (op != null) {
                    String[] datos = obtener_datos_cliente(op);
                    jtf_nit.setText(datos[3]);
                    if (!datos[0].isEmpty()) {
                        jtf_nombre_cliente.setText(datos[0]);
                        jtf_direccion_cliente.setText(datos[1]);
                        btn_agregar_mas.setText("Editar mas");
                        if (!datos[2].isEmpty()) {
                            Double credito1 = Double.parseDouble(datos[2]);
                            jtf_credito.setText(credito1 + "");
                        } else {
                            jtf_credito.setText("0");
                        }
                        btn_terminar_venta.setEnabled(true);
                    } else {
                        jtf_nit.setText(op.toUpperCase());
                        jtf_direccion_cliente.setEnabled(true);
                        jtf_nombre_cliente.setEnabled(true);
                        jtf_credito.setText("0");
                        jtf_nombre_cliente.requestFocus();
                        btn_agregar_mas.setText("INGRESAR MAS");
                    }
                    btn_agregar_mas.setVisible(true);
                } else {
                    btn_terminar_pedido.setEnabled(false);
                    JOptionPane.showMessageDialog(null, "Es necesario que rellenes los siguientes campos --->NIT,NOMBRE,TELEFONO--- para terminar el pedido");
                    limpiar_datos_pedido();
                }
                limpiar_datos_pedido();
            } else {
                if (!verificar_campos_venta()) {
                    JOptionPane.showMessageDialog(jl_nit, new JLabel("Tienes que llenar los campos requeridos (nit,nombre,telefono)"), "MENSAJE", JOptionPane.OK_OPTION);
                } else {
                    btn_terminar_pedido.setEnabled(true);
                }
                limpiar_datos_pedido();
            }
        }

    }//GEN-LAST:event_btn_agregar_pedidoActionPerformed

    private void btn_agregar_ventaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_agregar_ventaActionPerformed
        ArrayList<ProductoDTO> solo_tienda = existencias_tienda(actual.codigo_tienda);
        ProductoDTO p = producto_actual(solo_tienda);
        if (jt_venta_productos.getRowCount() > 0) {
            int pos = 0;
            boolean s = false;
            for (int i = 0; i < jt_venta_productos.getRowCount(); i++) {
                String tmp = jt_venta_productos.getValueAt(i, 0).toString();
                if (Integer.parseInt(tmp) == p.getCodigo_existencia()) {
                    pos = i;
                    s = true;
                    break;
                }
            }
            if (s) {
                int cantidad_o = (int) jt_venta_productos.getValueAt(pos, 4);
                int cantidad = cantidad_o + Integer.parseInt(jtf_cantidad_venta.getText());
                if (Integer.parseInt(jl_existencia_venta.getText()) >= cantidad) {
                    jt_venta_productos.setValueAt(cantidad, pos, 4);
                    jt_venta_productos.setValueAt(cantidad * p.getPrecio(), pos, 5);
                    Double nuevo = Double.parseDouble(jl_total_venta.getText()) + Integer.parseInt(jtf_cantidad_venta.getText()) * p.getPrecio();
                    jl_total_venta.setText(nuevo + "");
                    jtf_cantidad_venta.setText("");
                    btn_agregar_venta.setEnabled(false);
                } else {
                    JOptionPane.showMessageDialog(null, new JLabel("<html><body>NO SE INGRESO EL PRODUCTO A LA VENTA<br>POR NO TENER LAS EXISTENCIAS NECESARIAS</body></html>"), "ERROR", JOptionPane.OK_OPTION);
                }
            } else {
                rellenar_venta(p, Integer.parseInt(jtf_cantidad_venta.getText()));
                btn_agregar_venta.setEnabled(false);
                jtf_cantidad_venta.setText("");
            }
        } else {
            rellenar_venta(p, Integer.parseInt(jtf_cantidad_venta.getText()));
            btn_agregar_venta.setEnabled(false);
            jtf_cantidad_venta.setText("");
            if (jtf_nit.getText().isEmpty()) {
                JLabel jl = new JLabel("Ingresa el nit del cliente: ");
                JTextField jtf = new JTextField();
                JPanel jp = new JPanel();
                jp.setLayout(new GridLayout(1, 1));
                jp.add(jl);
                jp.add(jtf);
                jtf.requestFocus();
                //int opcion = JOptionPane.showConfirmDialog(null, jp, "NIT", JOptionPane.OK_CANCEL_OPTION);
                String op = JOptionPane.showInputDialog(null, "NIT:", "");
                if (op != null) {
                    String[] datos = obtener_datos_cliente(op);
                    jtf_nit.setText(datos[3]);
                    if (!datos[0].isEmpty()) {
                        jtf_nombre_cliente.setText(datos[0]);
                        jtf_direccion_cliente.setText(datos[1]);
                        btn_agregar_mas.setText("Editar mas");
                        if (!datos[2].isEmpty()) {
                            Double credito1 = Double.parseDouble(datos[2]);
                            jtf_credito.setText(credito1 + "");
                        } else {
                            jtf_credito.setText("0");
                        }
                        btn_terminar_venta.setEnabled(true);
                    } else {
                        jtf_nit.setText(op.toUpperCase());
                        jtf_direccion_cliente.setEnabled(true);
                        jtf_nombre_cliente.setEnabled(true);
                        jtf_credito.setText("0");
                        jtf_nombre_cliente.requestFocus();
                        btn_agregar_mas.setText("INGRESAR MAS");
                    }
                    btn_agregar_mas.setVisible(true);
                } else {
                    btn_terminar_venta.setEnabled(false);
                    JOptionPane.showMessageDialog(null, "Es necesario que rellenes los siguientes campos --->NIT,NOMBRE,TELEFONO--- para terminar la venta");

                }
            } else {
                if (!verificar_campos_venta()) {
                    JOptionPane.showMessageDialog(jl_nit, new JLabel("Tienes que llenar los campos requeridos (nit,nombre,telefono)"), "MENSAJE", JOptionPane.OK_OPTION);
                } else {
                    btn_terminar_venta.setEnabled(true);
                }
            }
        }
    }//GEN-LAST:event_btn_agregar_ventaActionPerformed

    private void jt_venta_productosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt_venta_productosMouseClicked
        int fila = jt_venta_productos.getSelectedRow();
        btn_eliminar_venta.setEnabled(fila != -1);
    }//GEN-LAST:event_jt_venta_productosMouseClicked

    private void btn_eliminar_ventaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_eliminar_ventaActionPerformed
        int fila = jt_venta_productos.getSelectedRow();
        DefaultTableModel modelo = (DefaultTableModel) jt_venta_productos.getModel();
        Double total = Double.parseDouble(jt_venta_productos.getValueAt(fila, 5).toString());
        Double nuevo = Double.parseDouble(jl_total_venta.getText()) - total;
        jl_total_venta.setText(nuevo + "");
        modelo.removeRow(fila);
        btn_eliminar_venta.setEnabled(false);
        if (jt_venta_productos.getRowCount() == 0) {
            jl_total_venta.setText("0");
        }
        btn_terminar_venta.setEnabled(jt_venta_productos.getRowCount() > 0);
    }//GEN-LAST:event_btn_eliminar_ventaActionPerformed

    private void btn_agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_agregarActionPerformed
        int fila = jt_existencias.getSelectedRow();
        if (btn_agregar.getText().equalsIgnoreCase("AGREGAR A VENTA")) {
            String c = jt_existencias.getValueAt(fila, 1).toString();
            String n = jt_existencias.getValueAt(fila, 2).toString();
            jcb_venta_producto.setSelectedItem(c + "|" + n);
            jTabbedPane1.setSelectedIndex(0);
        } else {
            int c = (int) jt_existencias.getValueAt(fila, 0);
            jtf_id.setText(c + "");
            jTabbedPane1.setSelectedIndex(1);
            ProductoDTO pro = new ProductoDTO();
            for (ProductoDTO p : todos_los_productos) {
                if (p.getCodigo_existencia() == c) {
                    pro = p;
                }
            }
            jtf_producto.setText(pro.getCodigo_producto() + "|" + pro.getNombre());
            jtf_existencia.setText(pro.getCantidad() + "");
            jtf_tienda.setText(pro.getCodigo_tienda() + "|" + nombre_tienda(pro.getCodigo_tienda()));
            String p1 = pro.getPrecio() + "";
            String p2 = aprox(p1);
            jtf_precio.setText(p2);
            jTabbedPane1.setSelectedIndex(2);
        }
    }//GEN-LAST:event_btn_agregarActionPerformed

    private void jtf_cantidadKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_cantidadKeyReleased
        String e = jtf_cantidad.getText();
        String tm = "";
        char c = evt.getKeyChar();
        if (evt.getKeyCode() != 8) {
            if (!Character.isDigit(c)) {
                for (int i = 0; i < e.length(); i++) {
                    if (Character.isDigit(e.charAt(i))) {
                        tm += e.charAt(i) + "";
                    }
                }
                jtf_cantidad.setText(tm);
            }
        }
        if (e.length() > 0) {
            int existencia = Integer.parseInt(jtf_existencia.getText());
            int cantidad = Integer.parseInt(jtf_cantidad.getText());

            int pos = existe_pedido(Integer.parseInt(jtf_id.getText()));

            if (pos != -1) {
                int cantidad_o = (int) jt_pedidos.getValueAt(pos, 3);
                int cantidad1 = cantidad_o + cantidad;
                if (existencia >= cantidad1) {
                    jl_aviso.setVisible(false);
                    jl_aviso.setToolTipText("No hay suficientes productos para realizar la venta, prueba buscar en otra tienda");
                } else {
                    jl_aviso.setVisible(true);
                }
                btn_agregar_pedido.setEnabled(existencia >= cantidad1);
            } else {
                if (existencia >= cantidad) {
                    jl_aviso.setVisible(false);
                    jl_aviso.setToolTipText("No hay suficientes productos para realizar la venta, prueba buscar en otra tienda");
                } else {
                    jl_aviso.setVisible(true);
                }
                btn_agregar_pedido.setEnabled(existencia >= cantidad);
            }
        }
    }//GEN-LAST:event_jtf_cantidadKeyReleased

    private void btn_eliminar_pedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_eliminar_pedidoActionPerformed
        int fila = jt_pedidos.getSelectedRow();
        DefaultTableModel modelo = (DefaultTableModel) jt_pedidos.getModel();
        Double total = Double.parseDouble(jt_pedidos.getValueAt(fila, 5).toString());
        Double nuevo = Double.parseDouble(jl_total_pedido.getText()) - total;
        jl_total_pedido.setText(nuevo + "");
        modelo.removeRow(fila);
        btn_eliminar_pedido.setEnabled(false);
        if (jt_pedidos.getRowCount() == 0) {
            jl_total_pedido.setText("0");
        }
        btn_terminar_pedido.setEnabled(jt_pedidos.getRowCount() > 0);
    }//GEN-LAST:event_btn_eliminar_pedidoActionPerformed

    private void jt_pedidosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt_pedidosMouseClicked
        btn_eliminar_pedido.setEnabled(jt_pedidos.getSelectedRow() != -1);
    }//GEN-LAST:event_jt_pedidosMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Utilidad ut = new Utilidad();
        limpiar_datos_pedido();
        ut.limpiar_tablas(jt_pedidos);
        btn_terminar_pedido.setEnabled(false);
        jl_total_pedido.setText("0.00");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btn_terminar_ventaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_terminar_ventaActionPerformed
        Double credit = Double.parseDouble(jtf_credito.getText());
        Double total_venta = Double.parseDouble(jl_total_venta.getText());
        if (jtf_nit.getText().isEmpty()) {
            Utilidad utili = new Utilidad();
            utili.informar(null, "Necesitas completar los campos requeridos(nit, telefono y nombre)", tienda_actual);
        } else {
            if (credit > 0) {
                JPanel jp = new JPanel();
                jp.setLayout(new GridLayout(2, 2));
                JComboBox jcb = new JComboBox(new String[]{"PAGO EN EFECTIVO", "USAR CREDITO"});
                jp.add(new JLabel("Dado que tu credito es Q" + credit + " ."));
                jp.add(new JLabel("Elige tu método de pago:"));
                jp.add(new JLabel("Metodo de pago: "));
                jp.add(jcb);
                JOptionPane.showConfirmDialog(null, jp, "METODO DE PAGO", JOptionPane.OK_OPTION);
                if (jcb.getSelectedItem().toString().equalsIgnoreCase("PAGO EN EFECTIVO")) {
                    pago_efectivo_venta(total_venta);
                } else {
                    JPanel jp2 = new JPanel();
                    JTextField tot = new JTextField(jl_total_venta.getText());
                    JTextField cred = new JTextField(jtf_credito.getText());
                    tot.setEnabled(false);
                    cred.setEnabled(false);
                    tot.setHorizontalAlignment(SwingConstants.CENTER);
                    cred.setHorizontalAlignment(SwingConstants.CENTER);

                    JTextField jt = new JTextField();
                    jt.setHorizontalAlignment(SwingConstants.CENTER);
                    JTextField jt2 = new JTextField();
                    jt2.setHorizontalAlignment(SwingConstants.CENTER);
                    TextPrompt tx12 = new TextPrompt("MONTO EFECTIVO", jt);
                    TextPrompt tx14 = new TextPrompt("MONTO CREDITO A USAR", jt2);
                    JButton cancelar = new JButton("Cancelar");

                    JButton continuar = new JButton("Continuar");
                    continuar.setEnabled(false);
                    tx12.changeStyle(2);
                    tx14.changeStyle(2);
                    jp2.setLayout(new GridLayout(4, 2));
                    jp2.add(new JLabel("TOTAL DE VENTA: ", SwingConstants.CENTER));
                    jp2.add(new JLabel("CREDITO DISPONIBLE: ", SwingConstants.CENTER));
                    jp2.add(tot);
                    jp2.add(cred);
                    jp2.add(jt);
                    jp2.add(jt2);
                    jp2.add(cancelar);
                    jp2.add(continuar);
                    JFrame jf = new JFrame();
                    jf.setUndecorated(true);
                    jf.setLocationRelativeTo(null);
                    jf.setSize(400, 150);
                    jf.add(jp2);
                    jf.setVisible(true);
                    cancelar.addActionListener((ActionEvent ae) -> {
                        jf.setVisible(false);
                        JOptionPane.showMessageDialog(null, new JLabel("No se registro ninguna venta"), "CANCELAR VENTA", JOptionPane.ERROR_MESSAGE);
                    });
                    Utilidad utilidad = new Utilidad();
                    KeyListener key = new KeyListener() {
                        @Override
                        public void keyTyped(KeyEvent ke) {

                        }

                        @Override
                        public void keyPressed(KeyEvent ke) {

                        }

                        @Override
                        public void keyReleased(KeyEvent ke) {
                            String e = jt.getText();
                            String tm = "";
                            char c = ke.getKeyChar();

                            if (ke.getKeyCode() != 8) {
                                if (!Character.isDigit(c)) {
                                    if (e.length() > 0) {
                                        for (int i = 0; i < (e.length()); i++) {
                                            if (Character.isDigit(e.charAt(i)) || c == '.') {
                                                tm += e.charAt(i) + "";
                                            }
                                        }
                                        jt.setText(tm);
                                        comprobar(tm);
                                    } else {
                                        jt.setText("0");
                                        comprobar(e);
                                    }
                                } else {
                                    comprobar(e);
                                }
                            } else {
                                comprobar(e);
                            }
                        }

                        public void comprobar(String tm) {
                            String ef = jt.getText();
                            String f = jt2.getText();
                            Double eff = 0.0;
                            Double ff = 0.0;
                            if (!ef.isEmpty()) {
                                eff = Double.parseDouble(ef);
                            }
                            if (!f.isEmpty()) {
                                ff = Double.parseDouble(f);
                            }
                            Double a = total_venta - (eff + ff);
                            Double b = credit - ff;
                            tot.setText(a + "");
                            cred.setText(b + "");
                            jtf_credito.setText(b + "");
                            if ((total_venta <= (eff + ff)) && (credit >= ff)) {
                                continuar.setEnabled(true);
                            } else {
                                if (credit < ff) {
                                    jt2.setForeground(Color.red);
                                } else {
                                    jt2.setForeground(Color.black);
                                }
                                continuar.setEnabled(false);
                            }
                        }
                    };

                    KeyListener key2 = new KeyListener() {
                        @Override
                        public void keyTyped(KeyEvent ke) {

                        }

                        @Override
                        public void keyPressed(KeyEvent ke) {

                        }

                        @Override
                        public void keyReleased(KeyEvent ke) {

                            String e = jt2.getText();
                            String tm = "";
                            char c = ke.getKeyChar();

                            if (ke.getKeyCode() != 8) {
                                if (!Character.isDigit(c)) {
                                    if (e.length() > 0) {
                                        for (int i = 0; i < (e.length()); i++) {
                                            if (Character.isDigit(e.charAt(i)) || c == '.') {
                                                tm += e.charAt(i) + "";
                                            }
                                        }
                                        jt2.setText(tm);
                                        comprobar(tm);
                                    } else {
                                        jt2.setText("0");
                                        comprobar(e);
                                    }
                                } else {
                                    comprobar(e);
                                }
                            } else {
                                comprobar(e);
                            }
                        }

                        public void comprobar(String tm) {
                            String ef = jt.getText();
                            String f = jt2.getText();
                            Double eff = 0.0;
                            Double ff = 0.0;
                            if (!ef.isEmpty()) {
                                eff = Double.parseDouble(ef);
                            }
                            if (!f.isEmpty()) {
                                ff = Double.parseDouble(f);
                            }
                            Double a = total_venta - (eff + ff);
                            Double b = credit - ff;
                            tot.setText(a + "");
                            cred.setText(b + "");
                            jtf_credito.setText(b + "");
                            if ((total_venta <= (eff + ff)) && (credit >= ff)) {
                                continuar.setEnabled(true);
                            } else {
                                if (credit < ff) {
                                    jt2.setForeground(Color.red);
                                } else {
                                    jt2.setForeground(Color.black);
                                }
                                continuar.setEnabled(false);
                            }
                        }
                    };

                    continuar.addActionListener((ActionEvent ae) -> {
                        Double actual_c = Double.parseDouble(cred.getText());
                        ClienteDAO cliente = new ClienteDAO(base);
                        venta(Double.parseDouble(jtf_credito.getText()));
                        jf.setVisible(false);

                    });

                    jt.addKeyListener(key);
                    jt2.addKeyListener(key2);
                    //JOptionPane.showConfirmDialog(null, jp2, "METODO DE PAGO", JOptionPane.OK_OPTION);

                }
            } else {
                Utilidad ut = new Utilidad();
                ut.informar(null, "Dado que el cliente no tiene credito, solo se puede pagar con efectivo", "METODO DE PAGO");
                pago_efectivo_venta(total_venta);
            }
        }
    }//GEN-LAST:event_btn_terminar_ventaActionPerformed

    private void jtf_nitKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_nitKeyReleased
        if (!jtf_nit.getText().isEmpty()) {
            String[] datos = obtener_datos_cliente(jtf_nit.getText());
            jtf_nit.setText(jtf_nit.getText().toUpperCase());
            if (!datos[0].isEmpty()) {
                jtf_nombre_cliente.setText(datos[0]);
                jtf_direccion_cliente.setText(datos[1]);
                if (!datos[2].isEmpty()) {
                    Double credito1 = Double.parseDouble(datos[2]);
                    jtf_credito.setText(credito1 + "");
                } else {
                    jtf_credito.setText("0");
                }
                jtf_nombre_cliente.setEnabled(false);
                jtf_direccion_cliente.setEnabled(false);
                jtf_credito.setEnabled(false);
                btn_agregar_mas.setText("Editar mas");
            } else {
                jtf_nombre_cliente.setEnabled(true);
                jtf_nombre_cliente.setText("");
                jtf_direccion_cliente.setEnabled(true);
                jtf_direccion_cliente.setText("");
                jtf_credito.setEnabled(false);
                jtf_credito.setText("0");
                btn_agregar_mas.setText("Agregar mas");
            }
            btn_agregar_mas.setVisible(true);
        } else {
            jtf_nombre_cliente.setEnabled(false);
            jtf_nombre_cliente.setText("");
            jtf_direccion_cliente.setEnabled(false);
            jtf_direccion_cliente.setText("");
            jtf_credito.setEnabled(false);
            jtf_credito.setText("");
            btn_agregar_mas.setVisible(false);
        }
        boolean ve = verificar_campos_venta();
    }//GEN-LAST:event_jtf_nitKeyReleased

    private void jtf_nombre_clienteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_nombre_clienteKeyReleased
        boolean ve = verificar_campos_venta();
    }//GEN-LAST:event_jtf_nombre_clienteKeyReleased

    private void jtf_direccion_clienteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_direccion_clienteKeyReleased
        boolean ve = verificar_campos_venta();
    }//GEN-LAST:event_jtf_direccion_clienteKeyReleased

    private void btn_terminar_pedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_terminar_pedidoActionPerformed
        Utilidad utili = new Utilidad();
        Double credit = Double.parseDouble(jtf_credito.getText());
        Double total_pedido = Double.parseDouble(jl_total_pedido.getText());
        Double anticipo_minimo = total_pedido * 0.25;
        if (jtf_nit.getText().isEmpty()) {

            utili.informar(null, "Necesitas completar los campos requeridos(nit, telefono y nombre) para realizar los pedidos", "REALIZAR PEDIDOS");
        } else {
            if (credit > 0) {
                JPanel jp = new JPanel();
                jp.setLayout(new GridLayout(2, 2));
                JComboBox jcb = new JComboBox(new String[]{"PAGO EN EFECTIVO", "USAR CREDITO"});
                jp.add(new JLabel("Dado que tu credito es Q" + credit + " ."));
                jp.add(new JLabel("Elige tu método de pago:"));
                jp.add(new JLabel("Metodo de pago: "));
                jp.add(jcb);
                JOptionPane.showConfirmDialog(null, jp, "METODO DE PAGO", JOptionPane.OK_OPTION);
                if (jcb.getSelectedItem().toString().equalsIgnoreCase("PAGO EN EFECTIVO")) {
                    pago_efectivo_venta(total_pedido);
                } else {
                    JPanel jp2 = new JPanel();
                    JTextField tot = new JTextField(jl_total_pedido.getText());
                    JTextField cred = new JTextField(jtf_credito.getText());
                    tot.setEnabled(false);
                    cred.setEnabled(false);
                    tot.setHorizontalAlignment(SwingConstants.CENTER);
                    cred.setHorizontalAlignment(SwingConstants.CENTER);

                    JTextField jt = new JTextField();
                    jt.setHorizontalAlignment(SwingConstants.CENTER);
                    JTextField jt2 = new JTextField();
                    jt2.setHorizontalAlignment(SwingConstants.CENTER);
                    TextPrompt tx12 = new TextPrompt("MONTO EFECTIVO", jt);
                    TextPrompt tx14 = new TextPrompt("MONTO CREDITO A USAR", jt2);
                    JButton cancelar = new JButton("Cancelar");

                    JButton continuar = new JButton("Continuar");
                    continuar.setEnabled(false);
                    tx12.changeStyle(2);
                    tx14.changeStyle(2);
                    jp2.setLayout(new GridLayout(5, 2));
                    jp2.add(new JLabel("<html><body>NOTA: puedes pagar todo lo del pedido o pagar<br>el anticipo minimo (25% del total)</body></html>", SwingConstants.CENTER));
                    JTextField jts = new JTextField("" + anticipo_minimo);
                    jts.setEnabled(false);
                    jts.setHorizontalAlignment(SwingConstants.CENTER);
                    jp2.add(jts);
                    jp2.add(new JLabel("TOTAL DE LOS PEDIDOS: ", SwingConstants.CENTER));
                    jp2.add(new JLabel("CREDITO DISPONIBLE: ", SwingConstants.CENTER));
                    jp2.add(tot);
                    jp2.add(cred);
                    jp2.add(jt);
                    jp2.add(jt2);
                    jp2.add(cancelar);
                    jp2.add(continuar);
                    JFrame jf = new JFrame();
                    jf.setUndecorated(true);
                    jf.setLocationRelativeTo(null);
                    jf.setSize(500, 250);
                    jf.add(jp2);
                    jf.setVisible(true);
                    cancelar.addActionListener((ActionEvent ae) -> {
                        jf.setVisible(false);
                        JOptionPane.showMessageDialog(null, new JLabel("No se registro ningun pedido"), "CANCELAR PEDIDO", JOptionPane.ERROR_MESSAGE);
                    });
                    KeyListener key = new KeyListener() {
                        @Override
                        public void keyTyped(KeyEvent ke) {

                        }

                        @Override
                        public void keyPressed(KeyEvent ke) {

                        }

                        @Override
                        public void keyReleased(KeyEvent ke) {
                            String e = jt.getText();
                            String tm = "";
                            char c = ke.getKeyChar();

                            if (ke.getKeyCode() != 8) {
                                if (!Character.isDigit(c)) {
                                    if (e.length() > 0) {
                                        for (int i = 0; i < (e.length()); i++) {
                                            if (Character.isDigit(e.charAt(i)) || c == '.') {
                                                tm += e.charAt(i) + "";
                                            }
                                        }
                                        jt.setText(tm);
                                        comprobar(tm);
                                    } else {
                                        jt.setText("0");
                                        comprobar(e);
                                    }
                                } else {
                                    comprobar(e);
                                }
                            } else {
                                comprobar(e);
                            }
                        }

                        public void comprobar(String tm) {
                            String ef = jt.getText();
                            String f = jt2.getText();
                            Double eff = 0.0;
                            Double ff = 0.0;
                            if (!ef.isEmpty()) {
                                eff = Double.parseDouble(ef);
                            }
                            if (!f.isEmpty()) {
                                ff = Double.parseDouble(f);
                            }
                            Double a = total_pedido - (eff + ff);
                            Double b = credit - ff;
                            tot.setText(a + "");
                            cred.setText(b + "");
                            Double requerido = total_pedido * 0.25;
                            jtf_credito.setText(b + "");
                            if ((requerido <= (eff + ff)) && (credit >= ff)) {
                                continuar.setEnabled(true);
                            } else {
                                if (credit < ff) {
                                    jt2.setForeground(Color.red);
                                } else {
                                    jt2.setForeground(Color.black);
                                }
                                continuar.setEnabled(false);
                            }
                        }
                    };

                    KeyListener key2 = new KeyListener() {
                        @Override
                        public void keyTyped(KeyEvent ke) {

                        }

                        @Override
                        public void keyPressed(KeyEvent ke) {

                        }

                        @Override
                        public void keyReleased(KeyEvent ke) {

                            String e = jt2.getText();
                            String tm = "";
                            char c = ke.getKeyChar();

                            if (ke.getKeyCode() != 8) {
                                if (!Character.isDigit(c)) {
                                    if (e.length() > 0) {
                                        for (int i = 0; i < (e.length()); i++) {
                                            if (Character.isDigit(e.charAt(i)) || c == '.') {
                                                tm += e.charAt(i) + "";
                                            }
                                        }
                                        jt2.setText(tm);
                                        comprobar(tm);
                                    } else {
                                        jt2.setText("0");
                                        comprobar(e);
                                    }
                                } else {
                                    comprobar(e);
                                }
                            } else {
                                comprobar(e);
                            }
                        }

                        public void comprobar(String tm) {
                            String ef = jt.getText();
                            String f = jt2.getText();
                            Double eff = 0.0;
                            Double ff = 0.0;
                            if (!ef.isEmpty()) {
                                eff = Double.parseDouble(ef);
                            }
                            if (!f.isEmpty()) {
                                ff = Double.parseDouble(f);
                            }
                            Double a = total_pedido - (eff + ff);
                            Double b = credit - ff;
                            tot.setText(a + "");
                            cred.setText(b + "");
                            jl_total_pedido.setText(eff + "");
                            jtf_credito.setText(b + "");
                            Double requerido = total_pedido * 0.25;
                            if ((requerido <= (eff + ff)) && (credit >= ff)) {
                                continuar.setEnabled(true);
                            } else {
                                if (credit < ff) {
                                    jt2.setForeground(Color.red);
                                } else {
                                    jt2.setForeground(Color.black);
                                }
                                continuar.setEnabled(false);
                            }
                        }
                    };

                    continuar.addActionListener((ActionEvent ae) -> {
                        ClienteDAO cliente = new ClienteDAO(base);
                        Double tot1 = Double.parseDouble(jl_total_pedido.getText());
                        Double credi = credit - Double.parseDouble(jtf_credito.getText());
                        jl_total_pedido.setText(total_pedido + "");
                        Double anticipo = tot1 + credi;

                        if (anticipo > total_pedido) {
                            Double cambi = anticipo - total_pedido;
                            anticipo = total_pedido;
                            utili.informar(null, "El cambio para el cliente es de Q" + cambi, tienda_actual);
                        } else {
                            if (total_pedido > anticipo) {
                                
                            } else {
                                anticipo = total_pedido;
                            }
                        }
                        pedido(anticipo);
                        jf.setVisible(false);

                    });

                    jt.addKeyListener(key);
                    jt2.addKeyListener(key2);
                    //JOptionPane.showConfirmDialog(null, jp2, "METODO DE PAGO", JOptionPane.OK_OPTION);

                }
            } else {
                Utilidad ut = new Utilidad();
                ut.informar(null, "Dado que el cliente no tiene credito, solo se puede pagar con efectivo", "METODO DE PAGO");
                pago_efectivo_pedido(total_pedido);
            }
        }
    }//GEN-LAST:event_btn_terminar_pedidoActionPerformed

    public void pago_efectivo_pedido(Double total_pedido) {
        Utilidad u = new Utilidad();
        Double anticipo_minimo = total_pedido * 0.25;
        JPanel jp2 = new JPanel();
        JTextField tot = new JTextField(jl_total_pedido.getText());
        tot.setEnabled(false);
        tot.setHorizontalAlignment(SwingConstants.CENTER);

        JTextField jt = new JTextField();
        jt.setHorizontalAlignment(SwingConstants.CENTER);
        TextPrompt tx12 = new TextPrompt("MONTO EFECTIVO", jt);
        JButton cancelar = new JButton("Cancelar");

        JButton continuar = new JButton("Continuar");
        continuar.setEnabled(false);
        tx12.changeStyle(2);
        jp2.setLayout(new GridLayout(4, 2));
        jp2.add(new JLabel("<html><body>NOTA: puedes pagar todo lo del pedido o pagar<br>el anticipo minimo (25% del total)</body></html>", SwingConstants.CENTER));
        JTextField jts = new JTextField("" + anticipo_minimo);
        jts.setEnabled(false);
        jts.setHorizontalAlignment(SwingConstants.CENTER);
        jp2.add(jts);
        jp2.add(new JLabel("TOTAL DE PEDIDO: ", SwingConstants.CENTER));
        jp2.add(tot);
        jp2.add(new JLabel("EFECTIVO: ", SwingConstants.CENTER));
        jp2.add(jt);
        jp2.add(cancelar);
        jp2.add(continuar);
        JFrame jf = new JFrame();
        jf.setUndecorated(true);
        jf.setLocationRelativeTo(null);
        jf.setSize(600, 200);
        jf.add(jp2);
        jf.setVisible(true);
        cancelar.addActionListener((ActionEvent ae) -> {
            jf.setVisible(false);
            JOptionPane.showMessageDialog(null, new JLabel("No se registro ninguna pedido"), "CANCELAR PEDIDO", JOptionPane.ERROR_MESSAGE);
        });
        Double cambio = 0.0;
        KeyListener key = new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {

            }

            @Override
            public void keyPressed(KeyEvent ke) {

            }

            @Override
            public void keyReleased(KeyEvent ke) {
                String e = jt.getText();
                String tm = "";
                char c = ke.getKeyChar();

                if (ke.getKeyCode() != 8) {
                    if (!Character.isDigit(c)) {
                        if (e.length() > 0) {
                            for (int i = 0; i < (e.length()); i++) {
                                if (Character.isDigit(e.charAt(i)) || c == '.') {
                                    tm += e.charAt(i) + "";
                                }
                            }
                            jt.setText(tm);
                            comprobar(tm);
                        } else {
                            jt.setText("0");
                            comprobar(e);
                        }
                    } else {
                        comprobar(e);
                    }
                } else {
                    comprobar(e);
                }
            }

            public void comprobar(String tm) {
                String ef = jt.getText();
                Double eff = 0.0;
                if (!ef.isEmpty()) {
                    eff = Double.parseDouble(ef);
                }
                Double a = total_pedido - eff;
                tot.setText(a + "");
                jl_total_pedido.setText(a + "");
                if (anticipo_minimo <= eff) {
                    continuar.setEnabled(true);
                } else {
                    continuar.setEnabled(false);
                }
            }
        };
        jt.addKeyListener(key);
        continuar.addActionListener((ActionEvent ae) -> {
            Double tot1 = Double.parseDouble(jl_total_pedido.getText());
            Double temporal = total_pedido - tot1;
            Double abso = abs(tot1);
            Double anticipo = 0.0;
            if (temporal > total_pedido) {
                Double cambi = temporal - total_pedido;
                anticipo = total_pedido;
                u.informar(null, "El cambio para el cliente es de Q" + cambi, tienda_actual);
            } else {
                if (total_pedido > abso) {
                    anticipo = total_pedido - abso;
                } else {
                    anticipo = total_pedido;
                }
            }
            jf.setVisible(false);
            jl_total_pedido.setText(total_pedido + "");
            pedido(anticipo);
        });
    }

    public void pago_efectivo_venta(Double total_venta) {
        JPanel jp2 = new JPanel();
        JTextField tot = new JTextField(jl_total_venta.getText());
        tot.setEnabled(false);
        tot.setHorizontalAlignment(SwingConstants.CENTER);

        JTextField jt = new JTextField();
        jt.setHorizontalAlignment(SwingConstants.CENTER);
        TextPrompt tx12 = new TextPrompt("MONTO EFECTIVO", jt);
        JButton cancelar = new JButton("Cancelar");

        JButton continuar = new JButton("Continuar");
        continuar.setEnabled(false);
        tx12.changeStyle(2);
        jp2.setLayout(new GridLayout(3, 2));
        jp2.add(new JLabel("TOTAL DE VENTA: ", SwingConstants.CENTER));
        jp2.add(tot);
        jp2.add(new JLabel("EFECTIVO: ", SwingConstants.CENTER));
        jp2.add(jt);
        jp2.add(cancelar);
        jp2.add(continuar);
        JFrame jf = new JFrame();
        jf.setUndecorated(true);
        jf.setLocationRelativeTo(null);
        jf.setSize(400, 150);
        jf.add(jp2);
        jf.setVisible(true);
        cancelar.addActionListener((ActionEvent ae) -> {
            jf.setVisible(false);
            JOptionPane.showMessageDialog(null, new JLabel("No se registro ninguna venta"), "CANCELAR VENTA", JOptionPane.ERROR_MESSAGE);
        });
        Double cambio = 0.0;
        KeyListener key = new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {

            }

            @Override
            public void keyPressed(KeyEvent ke) {

            }

            @Override
            public void keyReleased(KeyEvent ke) {
                String e = jt.getText();
                String tm = "";
                char c = ke.getKeyChar();

                if (ke.getKeyCode() != 8) {
                    if (!Character.isDigit(c)) {
                        if (e.length() > 0) {
                            for (int i = 0; i < (e.length()); i++) {
                                if (Character.isDigit(e.charAt(i)) || c == '.') {
                                    tm += e.charAt(i) + "";
                                }
                            }
                            jt.setText(tm);
                            comprobar(tm);
                        } else {
                            jt.setText("0");
                            comprobar(e);
                        }
                    } else {
                        comprobar(e);
                    }
                } else {
                    comprobar(e);
                }
            }

            public void comprobar(String tm) {
                String ef = jt.getText();
                Double eff = 0.0;
                if (!ef.isEmpty()) {
                    eff = Double.parseDouble(ef);
                }
                Double a = total_venta - eff;
                tot.setText(a + "");
                jl_total_venta.setText(a + "");
                if (total_venta <= eff) {
                    continuar.setEnabled(true);
                } else {
                    continuar.setEnabled(false);
                }
            }
        };
        jt.addKeyListener(key);
        continuar.addActionListener((ActionEvent ae) -> {
            Double tot1 = Double.parseDouble(jl_total_venta.getText()) * -1;
            jf.setVisible(false);
            if (tot1 != 0) {
                util.informar(null, "El cambio para el cliente es de: " + tot1, "CAMBIO");
            }
            jl_total_venta.setText(total_venta + "");
            venta(Double.parseDouble(jtf_credito.getText()));
        });
    }

    public void pedido(Double anticipo) {
        Utilidad utilidad = new Utilidad();
        ClienteDAO cliente = new ClienteDAO(base);
        ProductoDAO producto = new ProductoDAO(base);
        if (cliente.ingreso_cliente(jtf_nit.getText(), jtf_nombre_cliente.getText(), jtf_direccion_cliente.getText(),
                Double.parseDouble(jtf_credito.getText()), null, null, null)) {
            String codigo_tienda2 = (String) jt_pedidos.getValueAt(0, 2);
            String c_tienda2 = decodificar(codigo_tienda2);
            int codigo_pedido = producto.ultimo_pedido() + 1;
            if (producto.ingreso_pedido(codigo_pedido,getTienda_actual(), c_tienda2, getFecha_actual(),
                    jtf_nit.getText(), anticipo)) {
                int filas = jt_pedidos.getRowCount();
                String mensaje = "Los siguientes productos fueron pedidos correctamente a la tienda " + c_tienda2 + ": ";
                for (int i = 0; i < filas; i++) {
                    int id = (int) jt_pedidos.getValueAt(i, 0);
                    String cod = (String) jt_pedidos.getValueAt(i, 1);
                    String decod = decodificar(cod);
                    int cantidad = (int) jt_pedidos.getValueAt(i, 3);
                    Double total = (Double) jt_pedidos.getValueAt(i, 5);
                    if (producto.ingreso_solicitado(decod, codigo_pedido, cantidad, total)) {
                        ProductoDAO pro = new ProductoDAO(base);
                        if (pro.quitar_existencias(id, cantidad)) {
                            mensaje += cod + ",";
                        }
                    } 
                }
                utilidad.informar(null, mensaje, "TERMINAR PEDIDO");
                vaciar_pedido();
                vaciar();
                jtf_nombre_cliente.setEnabled(false);
                jtf_direccion_cliente.setEnabled(false);
            }
        } else {
            JOptionPane.showMessageDialog(null, new JLabel("ERROR: ocurrio un error en la base de datos, intenta mas tarde"), "ERROR BASE DE DATOS", JOptionPane.YES_OPTION);
        }
    }

    public void venta(Double credito) {
        Utilidad utilidad = new Utilidad();
        ClienteDAO cliente = new ClienteDAO(base);
        if (!btn_agregar_mas.getText().equalsIgnoreCase("Editar mas")) {
            if (cliente.ingreso_cliente(jtf_nit.getText(), jtf_nombre_cliente.getText(), jtf_direccion_cliente.getText(),
                    credito, null, null, null)) {
                int ingresado = cliente.crear_factura(tienda_actual, jtf_nit.getText(), getFecha_actual(),
                        Double.parseDouble(jl_total_venta.getText()), credito);
                if (ingresado != -1) {
                    int filas = jt_venta_productos.getRowCount();
                    String mensaje = "Los siguientes productos fueron ingresados correctamente: ";
                    for (int i = 0; i < filas; i++) {
                        String cod = (String) jt_venta_productos.getValueAt(i, 1);
                        int cantidad = (int) jt_venta_productos.getValueAt(i, 4);
                        Double total = (Double) jt_venta_productos.getValueAt(i, 5);
                        if (cliente.ingresar_venta(ingresado, cod, cantidad, total)) {
                            ProductoDAO pro = new ProductoDAO(base);
                            if (pro.quitar_existencias(obtener_id_existencia(cod, getTienda_actual()), cantidad)) {
                                mensaje += cod + ",";
                            }
                        }
                    }
                    utilidad.informar(null, mensaje, "TERMINAR VENTA");
                    vaciar();
                }
            } else {
                JOptionPane.showMessageDialog(null, new JLabel("ERROR: ocurrio un error en la base de datos, intenta mas tarde"), "ERROR BASE DE DATOS", JOptionPane.YES_OPTION);
            }
        } else {
            if (cliente.ingreso_cliente(jtf_nit.getText(), jtf_nombre_cliente.getText(), jtf_direccion_cliente.getText(),
                    credito, null, null, null)) {
                int ingresado = cliente.crear_factura(tienda_actual, jtf_nit.getText(), getFecha_actual(),
                        Double.parseDouble(jl_total_venta.getText()), credito);
                if (ingresado != -1) {
                    int filas = jt_venta_productos.getRowCount();
                    String mensaje = "Los siguientes productos fueron ingresados correctamente: ";
                    for (int i = 0; i < filas; i++) {
                        String cod = (String) jt_venta_productos.getValueAt(i, 1);
                        int cantidad = (int) jt_venta_productos.getValueAt(i, 4);
                        Double total = (Double) jt_venta_productos.getValueAt(i, 5);
                        if (cliente.ingresar_venta(ingresado, cod, cantidad, total)) {
                            ProductoDAO pro = new ProductoDAO(base);
                            if (pro.quitar_existencias(obtener_id_existencia(cod, getTienda_actual()), cantidad)) {
                                mensaje += cod + ",";
                            }

                        }
                    }
                    utilidad.informar(null, mensaje, "TERMINAR VENTA");
                    vaciar();
                } else {
                    utilidad.informar(null, "ERROR: ocurrio un error en la base de datos, intenta mas tarde", "ERROR CONEXION DATABASE");
                }
            }
        }
    }

    public void vaciar() {
        Utilidad utilidad = new Utilidad();
        utilidad.limpiar_tablas(jt_venta_productos);
        rellenar_jcb();
        actualizar_productos_todos();
        jcb_filtrar_tienda.setSelectedItem("TODAS");
        jl_temporal_existencias.setVisible(false);
        jtf_temporal_existencias.setVisible(false);
    }

    public void vaciar_pedido(){
        Utilidad utilidad = new Utilidad();
        utilidad.limpiar_tablas(jt_pedidos);
        limpiar_datos_pedido();
        rellenar_jcb();
        ClienteDAO cli = new ClienteDAO(base);
        clientes = cli.obtener_clientes();
        jcb_filtrar_tienda.setSelectedItem("TODAS");
        jl_temporal_existencias.setVisible(false);
        jtf_temporal_existencias.setVisible(false);
        btn_terminar_pedido.setEnabled(false);
        jl_total_pedido.setText("0.00");
    }
    
    public boolean verificar_campos_venta() {
        boolean verificado = false;
        if (!jtf_nit.getText().isEmpty() && !jtf_nombre_cliente.getText().isEmpty() && !jtf_direccion_cliente.getText().isEmpty() && jt_venta_productos.getRowCount() > 0) {
            btn_terminar_venta.setEnabled(true);
            verificado = true;
        } else {
            btn_terminar_venta.setEnabled(false);
        }

        if (!jtf_nit.getText().isEmpty() && !jtf_nombre_cliente.getText().isEmpty() && !jtf_direccion_cliente.getText().isEmpty() && jt_pedidos.getRowCount() > 0) {
            btn_terminar_pedido.setEnabled(true);
            verificado = true;
        } else {
            btn_terminar_pedido.setEnabled(false);
        }
        return verificado;
    }

    public int existe_venta() {
        ArrayList<ProductoDTO> solo_tienda = existencias_tienda(actual.codigo_tienda);
        ProductoDTO p = producto_actual(solo_tienda);
        int pos = -1;
        for (int i = 0; i < jt_venta_productos.getRowCount(); i++) {
            String tmp = jt_venta_productos.getValueAt(i, 0).toString();
            if (Integer.parseInt(tmp) == p.getCodigo_existencia()) {
                pos = i;
                break;
            }
        }
        return pos;
    }

    public int obtener_id_existencia(String codigo_producto, String codigo_tienda) {
        int id = -1;
        for (ProductoDTO p : todos_los_productos) {
            if (p.getCodigo_producto().equalsIgnoreCase(codigo_producto) && p.getCodigo_tienda().equalsIgnoreCase(codigo_tienda)) {
                id = p.getCodigo_existencia();
                break;
            }
        }
        return id;
    }

    public int existe_pedido(int id) {
        int pos = -1;
        for (int i = 0; i < jt_pedidos.getRowCount(); i++) {
            String tmp = jt_pedidos.getValueAt(i, 0).toString();
            if (Integer.parseInt(tmp) == id) {
                pos = i;
                break;
            }
        }
        return pos;
    }

    public final void rellenar_jcb() {
        TiendaDAO tienda = new TiendaDAO();
        ProductoDAO producto = new ProductoDAO();
        todos_los_productos = producto.obtener_existencias();
        ArrayList<ProductoDTO> solo_tienda = existencias_tienda(actual.codigo_tienda);
        tiendas = tienda.obtener_tiendas();

        jcb_venta_producto.setModel(new javax.swing.DefaultComboBoxModel<>());
        for (int i = 0; i < solo_tienda.size(); i++) {
            jcb_venta_producto.addItem(solo_tienda.get(i).getCodigo_producto() + "|" + solo_tienda.get(i).getNombre());
        }
        cambiar_producto();
        actualizar_productos_todos();
    }

    public void actualizar_productos_todos() {
        btn_agregar.setEnabled(false);
        util.limpiar_tablas(jt_existencias);
        for (int i = 0; i < todos_los_productos.size(); i++) {
            ProductoDTO p = todos_los_productos.get(i);
            rellenar_existencias(p);
        }
    }

    public void rellenar_tabla_existencias(String condicion, String condicion2) {
        btn_agregar.setEnabled(false);
        util.limpiar_tablas(jt_existencias);
        for (int i = 0; i < todos_los_productos.size(); i++) {
            ProductoDTO p = todos_los_productos.get(i);
            if (condicion2.length() > 0 && condicion.length() > 0) {
                if ((p.getCodigo_producto().toUpperCase().contains(condicion.toUpperCase()) || p.getNombre().toUpperCase().contains(condicion.toUpperCase()))
                        && (p.getCodigo_tienda().toUpperCase().contains(condicion2.toUpperCase()) || nombre_tienda(p.getCodigo_tienda()).toUpperCase().contains(condicion2.toUpperCase()))) {
                    rellenar_existencias(p);
                }
            } else {
                if (condicion2.length() == 0) {
                    if (p.getCodigo_producto().toUpperCase().contains(condicion.toUpperCase()) || p.getNombre().toUpperCase().contains(condicion.toUpperCase())) {
                        rellenar_existencias(p);
                    }
                } else {
                    if (p.getCodigo_tienda().toUpperCase().contains(condicion2.toUpperCase()) || nombre_tienda(p.getCodigo_tienda()).toUpperCase().contains(condicion2.toUpperCase())) {
                        rellenar_existencias(p);
                    }
                }
            }
        }
    }

    public void rellenar_existencias(ProductoDTO p) {
        Object[] fila = new Object[7];
        DefaultTableModel model = (DefaultTableModel) jt_existencias.getModel();
        fila[0] = p.getCodigo_existencia();
        fila[1] = p.getCodigo_producto();
        fila[2] = p.getNombre();
        fila[3] = p.getFabricante();
        fila[4] = p.getPrecio();
        fila[5] = p.getCodigo_tienda() + "|" + nombre_tienda(p.getCodigo_tienda());
        fila[6] = p.getCantidad();
        model.addRow(fila);
    }

    public void rellenar_venta(ProductoDTO p, int cantidad) {
        Object[] fila = new Object[6];
        DefaultTableModel model = (DefaultTableModel) jt_venta_productos.getModel();
        fila[0] = p.getCodigo_existencia();
        fila[1] = p.getCodigo_producto();
        fila[2] = p.getNombre();
        fila[3] = p.getPrecio();
        fila[4] = cantidad;
        fila[5] = p.getPrecio() * cantidad;
        model.addRow(fila);
        Double total_venta = Double.parseDouble(jl_total_venta.getText());
        Double precio = p.getPrecio() * cantidad + total_venta;
        jl_total_venta.setText(precio + "");
        btn_terminar_venta.setEnabled(true);
    }

    public void rellenar_pedido(ProductoDTO p, int cantidad) {
        Object[] fila = new Object[6];
        DefaultTableModel model = (DefaultTableModel) jt_pedidos.getModel();
        fila[0] = p.getCodigo_existencia();
        fila[1] = p.getCodigo_producto() + "|" + p.getNombre();
        fila[2] = p.getCodigo_tienda() + "|" + nombre_tienda(p.getCodigo_tienda());
        fila[3] = cantidad;
        fila[4] = p.getPrecio();
        fila[5] = p.getPrecio() * cantidad;
        model.addRow(fila);
        Double total_venta = Double.parseDouble(jl_total_pedido.getText());
        Double precio = p.getPrecio() * cantidad + total_venta;
        jl_total_pedido.setText(precio + "");
        btn_terminar_pedido.setEnabled(true);
    }

    public ArrayList<ProductoDTO> existencias_tienda(String codigo_tienda) {
        ArrayList<ProductoDTO> solo_tienda = new ArrayList<>();
        for (int i = 0; i < todos_los_productos.size(); i++) {
            if (todos_los_productos.get(i).getCodigo_tienda().equalsIgnoreCase(codigo_tienda)) {
                solo_tienda.add(todos_los_productos.get(i));
            }
        }
        return solo_tienda;
    }

    public String getTienda_actual() {
        return tienda_actual;
    }

    public void setTienda_actual(String tienda_actual) {
        this.tienda_actual = tienda_actual;
    }

    public String decodificar(String codigo) {
        int posicion = codigo.indexOf("|");
        String r = "";
        for (int i = 0; i < posicion; i++) {
            r += codigo.charAt(i) + "";
        }
        return r;
    }

    public ProductoDTO producto_actual(ArrayList<ProductoDTO> p) {
        ProductoDTO producto = new ProductoDTO();
        for (ProductoDTO pro : p) {
            if (jcb_venta_producto.getSelectedItem().toString().contains(pro.getCodigo_producto())) {
                producto = pro;
                break;
            }
        }
        return producto;
    }

    public void cambiar_producto() {
        ArrayList<ProductoDTO> solo_tienda = existencias_tienda(actual.codigo_tienda);
        ProductoDTO p = producto_actual(solo_tienda);

        String precio_limitado = "";
        String precio = p.getPrecio() + "";

        if (!jcb_venta_producto.getSelectedItem().toString().equalsIgnoreCase("SIN EXISTENCIAS EN TIENDA")) {
            if (precio.length() > 8) {
                for (int i = 0; i < 8; i++) {
                    precio_limitado += precio.charAt(i);
                }
            } else {
                precio_limitado = precio;
            }
            jl_existencia_venta.setText(p.getCantidad() + "");
            jl_precio_venta.setText(precio_limitado);
        } else {
            jl_existencia_venta.setText("0");
            jl_precio_venta.setText("0");
        }
    }

    public String nombre_tienda(String codigo_tienda) {
        String nombre = "";
        for (TiendaDTO tienda : tiendas) {
            if (tienda.getCodigo_tienda().equalsIgnoreCase(codigo_tienda)) {
                nombre = tienda.getNombre();
            }
        }
        return nombre;
    }

    public String aprox(String precio) {
        int pos = -1;
        for (int i = 0; i < precio.length(); i++) {
            if (precio.charAt(i) == '.') {
                pos = i;
                break;
            }
        }
        String o = "";
        if (pos != -1) {
            int posi = pos + 3;
            for (int i = 0; (i < precio.length()) && (i < posi); i++) {
                o += precio.charAt(i) + "";
            }
        }
        if (o.isEmpty()) {
            return precio;
        } else {
            return o;
        }
    }

    public void limpiar_datos_pedido() {
        jtf_id.setText("");
        jtf_producto.setText("");
        jtf_precio.setText("");
        jtf_tienda.setText("");
        jtf_existencia.setText("");

    }

    public String obtener_fecha(JDateChooser jd) {
        if (jd.getDate() != null) {
            return (new SimpleDateFormat("yyyy-MM-dd")).format(jd.getDate());
        } else {
            return "SIN INGRESAR";
        }
    }

    public String[] obtener_datos_cliente(String nit) {
        String[] datos = new String[4];
        ClienteDTO nuevo = new ClienteDTO();
        boolean encontrado = false;
        for (ClienteDTO c : clientes) {
            if (c.getNit().equalsIgnoreCase(nit)) {
                nuevo = c;
                encontrado = true;
                break;
            }
        }

        if (encontrado) {
            datos[0] = nuevo.getNombre();
            datos[1] = nuevo.getTelefono();
            datos[2] = nuevo.getCredito() + "";
            datos[3] = nuevo.getNit();
        } else {
            for (int i = 0; i < 4; i++) {
                datos[i] = "";
            }
        }
        return datos;
    }

    public Date getFecha_actual() {
        return fecha_actual;
    }

    public void setFecha_actual(Date fecha_actual) {
        this.fecha_actual = fecha_actual;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_agregar;
    private javax.swing.JButton btn_agregar_mas;
    private javax.swing.JButton btn_agregar_pedido;
    private javax.swing.JButton btn_agregar_venta;
    private javax.swing.JButton btn_eliminar_pedido;
    private javax.swing.JButton btn_eliminar_venta;
    private javax.swing.JButton btn_terminar_pedido;
    private javax.swing.JButton btn_terminar_venta;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JComboBox<String> jcb_filtrar_tienda;
    private javax.swing.JComboBox<String> jcb_venta_producto;
    private javax.swing.JLabel jl_aviso;
    private javax.swing.JLabel jl_aviso_venta;
    private javax.swing.JLabel jl_credito;
    private javax.swing.JTextField jl_existencia_venta;
    private javax.swing.JLabel jl_nit;
    private javax.swing.JTextField jl_precio_venta;
    private javax.swing.JLabel jl_temporal_existencias;
    private javax.swing.JLabel jl_total_pedido;
    private javax.swing.JLabel jl_total_venta;
    private javax.swing.JTable jt_existencias;
    private javax.swing.JTable jt_pedidos;
    private javax.swing.JTable jt_venta_productos;
    private javax.swing.JTextField jtf_buscar_venta;
    private javax.swing.JTextField jtf_cantidad;
    private javax.swing.JTextField jtf_cantidad_venta;
    private javax.swing.JTextField jtf_credito;
    private javax.swing.JTextField jtf_direccion_cliente;
    private javax.swing.JTextField jtf_existencia;
    private javax.swing.JTextField jtf_existencia_producto;
    private javax.swing.JTextField jtf_id;
    private javax.swing.JTextField jtf_nit;
    private javax.swing.JTextField jtf_nombre_cliente;
    private javax.swing.JTextField jtf_precio;
    private javax.swing.JTextField jtf_producto;
    private javax.swing.JTextField jtf_temporal_existencias;
    private javax.swing.JTextField jtf_tienda;
    // End of variables declaration//GEN-END:variables
}
