/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Visualizacion;

import Base.*;
import POJOS.ClienteDTO;
import POJOS.EmpleadoDTO;
import POJOS.ProductoDTO;
import POJOS.TiendaDTO;
import Util.TextPrompt;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author yelbetto
 */
public class Insertar extends javax.swing.JPanel {

    ClienteDAO base_cliente;
    EmpleadoDAO base_empleado;
    ProductoDAO base_productos = new ProductoDAO();
    TiendaDAO base_tienda;
    TiendaDAO base_tiendas = new TiendaDAO();
    ConectorBD base = new ConectorBD();
    ArrayList<ProductoDTO> listado_todos_productos = new ArrayList<>();
    ArrayList<TiendaDTO> listado_todas_tiendas = new ArrayList<>();
    ArrayList<ClienteDTO> listado_todos_clientes = new ArrayList<>();
    ArrayList<EmpleadoDTO> listado_todos_empleados = new ArrayList<>();
    ArrayList<String[]> tiempos = new ArrayList<>();
    String codigo_tienda_actual;
    ProductoDTO codigo_existente = new ProductoDTO();
    String tiempo = "";
    String cantidad_inicial = "";
    String codigo_producto_cambio = "";
    int panel_seleccionado = 0;
    int pso = 0;
    String codigo_tienda = "";
    TextPrompt tp_clientes;
    TextPrompt tp_existencias;
    TextPrompt tp_tiendas;
    TextPrompt tp_productos;
    TextPrompt tp_empleados;

    /**
     * Creates new form Insertar
     */
    public Insertar() {
        initComponents();
        jl_temporal.setVisible(false);
        jtf_filtrar_temporal.setVisible(false);
        jl_temporal_tiendas.setVisible(false);
        jtf_temporal_tiendas.setVisible(false);
        jl_temporal_productos.setVisible(false);
        jtf_temporal_producto.setVisible(false);
        jl_temporal_existencias.setVisible(false);
        jtf_temporal_existencias.setVisible(false);
        jl_temporal_empleados.setVisible(false);
        jtf_temporal_empleados.setVisible(false);
        jcb_temporal_existencias.setVisible(false);
        jl_temporal_tiempos.setVisible(false);
        jtf_temporal_tiempos.setVisible(false);
        if (base.conectar()) {
            base_cliente = new ClienteDAO(base);
            base_empleado = new EmpleadoDAO(base);
            base_tienda = new TiendaDAO(base);
            listado_todos_clientes = base_cliente.obtener_clientes();
            listado_todos_empleados = base_empleado.obtener_clientes();
            tiempos = base_tienda.obtener_tiempos();
        }
        listado_todos_productos = base_productos.obtener_existencias();
        listado_todas_tiendas = base_tiendas.obtener_tiendas();
        btn_cancelar_producto.setVisible(false);
        btn_cancelar_cliente.setVisible(false);
        btn_cancelar_tienda.setVisible(false);
        btn_cancelar_empleado.setVisible(false);
        btn_modificar.setEnabled(false);
        btn_actualizar.setEnabled(false);
        btn_limpiar_producto.setVisible(false);
        jl_aviso_tienda.setVisible(false);
        jl_codigo_existente.setVisible(false);
        btn_cancelar_existencia.setVisible(false);
        tp_clientes = new TextPrompt("Se muestran todos", jtf_filtrar_temporal);
        tp_clientes.changeStyle(2);
        tp_tiendas = new TextPrompt("Se muestran todas", jtf_temporal_tiendas);
        tp_tiendas.changeStyle(2);
        tp_existencias = new TextPrompt("Se muestran todos", jtf_temporal_existencias);
        tp_existencias.changeStyle(2);
        tp_productos = new TextPrompt("Se muestran todos", jtf_temporal_producto);
        tp_productos.changeStyle(2);
        tp_empleados = new TextPrompt("Se muestran todos", jtf_temporal_empleados);
        tp_empleados.changeStyle(2);
        btn_cancelar_tiempo.setVisible(false);
        codigo_existente.setCodigo_existencia(-1);
        rellenar_inicio();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jtf_nombre_cliente = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jtf_nit_cliente = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jtf_telefono_cliente = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jtf_credito_cliente = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jtf_dpi_cliente = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jtf_direccion_cliente = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jtf_email_cliente = new javax.swing.JTextField();
        btn_ingresar_cliente = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jt_listado_clientes = new javax.swing.JTable();
        btn_editar_cliente = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        jcb_filtrar_clientes = new javax.swing.JComboBox<>();
        jl_temporal = new javax.swing.JLabel();
        jtf_filtrar_temporal = new javax.swing.JTextField();
        btn_cancelar_cliente = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jtf_codigo_tienda = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jtf_nombre_tienda = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jtf_direccion_tienda = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jtf_email_tienda = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jtf_horario_tienda = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jtf_telefono_tienda = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jtf_telefono2_tienda = new javax.swing.JTextField();
        btn_ingresar_tienda = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jt_listado_tiendas = new javax.swing.JTable();
        btn_editar_tienda = new javax.swing.JButton();
        jLabel26 = new javax.swing.JLabel();
        jcb_filtrar_tiendas = new javax.swing.JComboBox<>();
        jl_temporal_tiendas = new javax.swing.JLabel();
        jtf_temporal_tiendas = new javax.swing.JTextField();
        btn_cancelar_tienda = new javax.swing.JButton();
        jl_aviso_tienda = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jcb_tiendas1 = new javax.swing.JComboBox<>();
        jLabel19 = new javax.swing.JLabel();
        jcb_tiendas2 = new javax.swing.JComboBox<>();
        jLabel20 = new javax.swing.JLabel();
        jtf_dias = new javax.swing.JTextField();
        btn_ingresar_tiempo = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jt_listado_tiempos = new javax.swing.JTable();
        jcb_filtrar_tiempos = new javax.swing.JComboBox<>();
        jLabel24 = new javax.swing.JLabel();
        btn_editar_tiempo = new javax.swing.JButton();
        jl_temporal_tiempos = new javax.swing.JLabel();
        jtf_temporal_tiempos = new javax.swing.JTextField();
        btn_cancelar_tiempo = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jt_listado_productos = new javax.swing.JTable();
        btn_modificar_producto = new javax.swing.JButton();
        jLabel27 = new javax.swing.JLabel();
        jtf_codigo_producto = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        jtf_nombre_producto = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        jtf_fabricante_producto = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        jtf_precio_producto = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jta_descripcion_producto = new javax.swing.JTextArea();
        jLabel32 = new javax.swing.JLabel();
        jtf_garantia_producto = new javax.swing.JTextField();
        btn_ingresar_producto = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jcb_filtrar_productos = new javax.swing.JComboBox<>();
        jl_temporal_productos = new javax.swing.JLabel();
        btn_cancelar_producto = new javax.swing.JButton();
        jl_codigo_existente = new javax.swing.JLabel();
        btn_limpiar_producto = new javax.swing.JButton();
        jtf_temporal_producto = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel33 = new javax.swing.JLabel();
        jcb_producto_existencia = new javax.swing.JComboBox<>();
        jLabel34 = new javax.swing.JLabel();
        jcb_tienda_existencia = new javax.swing.JComboBox<>();
        jLabel35 = new javax.swing.JLabel();
        btn_actualizar = new javax.swing.JButton();
        jtf_cantidad_existencia = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jcb_filtrar_existencias = new javax.swing.JComboBox<>();
        jl_temporal_existencias = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jt_listado_existencias = new javax.swing.JTable();
        btn_modificar = new javax.swing.JButton();
        jcb_temporal_existencias = new javax.swing.JComboBox<>();
        jtf_temporal_existencias = new javax.swing.JTextField();
        btn_cancelar_existencia = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel38 = new javax.swing.JLabel();
        jtf_codigo_empleado = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        jtf_nombre_empleado = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        jtf_telefono_empleado = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        jtf_dpi_empleado = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        jtf_nit_empleado = new javax.swing.JTextField();
        jLabel43 = new javax.swing.JLabel();
        jtf_direccion_empleado = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        jtf_email_empleado = new javax.swing.JTextField();
        btn_ingresar_empleado = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        jt_listado_empleados = new javax.swing.JTable();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jcb_filtrar_empleados = new javax.swing.JComboBox<>();
        jl_temporal_empleados = new javax.swing.JLabel();
        btn_editar_empleado = new javax.swing.JButton();
        jtf_temporal_empleados = new javax.swing.JTextField();
        btn_cancelar_empleado = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseEntered(evt);
            }
        });

        jLabel2.setText("Nombre:");

        jLabel3.setText("NIT:");

        jLabel4.setText("Telefono:");

        jLabel5.setText("Credito:");

        jLabel6.setText("DPI:");

        jLabel7.setText("Direccion:");

        jLabel8.setText("Email");

        btn_ingresar_cliente.setText("INGRESAR");
        btn_ingresar_cliente.setEnabled(false);
        btn_ingresar_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ingresar_clienteActionPerformed(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("LISTADO DE CLIENTES");

        jt_listado_clientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NIT", "Nombre", "Telefono", "Credito", "DPI", "Direccion", "Email"
            }
        ));
        jt_listado_clientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jt_listado_clientesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jt_listado_clientes);

        btn_editar_cliente.setText("EDITAR");
        btn_editar_cliente.setEnabled(false);
        btn_editar_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editar_clienteActionPerformed(evt);
            }
        });

        jLabel25.setText("FILTRAR:");

        jcb_filtrar_clientes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TODOS", "POR NIT", "POR NOMBRE" }));
        jcb_filtrar_clientes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcb_filtrar_clientesItemStateChanged(evt);
            }
        });

        jl_temporal.setText("TEMPORAL:");

        jtf_filtrar_temporal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtf_filtrar_temporal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_filtrar_temporalKeyReleased(evt);
            }
        });

        btn_cancelar_cliente.setText("CANCELAR");
        btn_cancelar_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelar_clienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtf_nit_cliente, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                    .addComponent(jtf_telefono_cliente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jtf_nombre_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jtf_credito_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtf_dpi_cliente))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jtf_email_cliente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_ingresar_cliente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_cancelar_cliente))
                    .addComponent(jtf_direccion_cliente)))
            .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btn_editar_cliente))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcb_filtrar_clientes, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jl_temporal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtf_filtrar_temporal, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jtf_nit_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jtf_nombre_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_telefono_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jtf_credito_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jtf_dpi_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_direccion_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_email_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(btn_ingresar_cliente)
                    .addComponent(btn_cancelar_cliente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(jcb_filtrar_clientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jl_temporal)
                    .addComponent(jtf_filtrar_temporal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_editar_cliente)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Cliente", jPanel1);

        jLabel9.setText("Codigo:");

        jtf_codigo_tienda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_codigo_tiendaKeyReleased(evt);
            }
        });

        jLabel10.setText("Nombre:");

        jLabel11.setText("Dirección:");

        jtf_direccion_tienda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtf_direccion_tiendaActionPerformed(evt);
            }
        });

        jLabel12.setText("Email:");

        jLabel13.setText("Horario:");

        jLabel14.setText("Telefono:");

        jLabel15.setText("Telefono 2:");

        btn_ingresar_tienda.setFont(new java.awt.Font("Dialog", 1, 8)); // NOI18N
        btn_ingresar_tienda.setText("INGRESAR");
        btn_ingresar_tienda.setEnabled(false);
        btn_ingresar_tienda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ingresar_tiendaActionPerformed(evt);
            }
        });

        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setText("LISTADO TIENDAS");

        jt_listado_tiendas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Nombre", "Direccion", "Telefono", "Telefono 2", "Email", "Horario"
            }
        ));
        jt_listado_tiendas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jt_listado_tiendasMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jt_listado_tiendas);

        btn_editar_tienda.setText("EDITAR");
        btn_editar_tienda.setEnabled(false);
        btn_editar_tienda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editar_tiendaActionPerformed(evt);
            }
        });

        jLabel26.setText("FILTRAR:");

        jcb_filtrar_tiendas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TODO", "POR CODIGO", "POR NOMBRE" }));
        jcb_filtrar_tiendas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcb_filtrar_tiendasItemStateChanged(evt);
            }
        });

        jl_temporal_tiendas.setText("TEMPORAL");

        jtf_temporal_tiendas.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtf_temporal_tiendas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_temporal_tiendasKeyReleased(evt);
            }
        });

        btn_cancelar_tienda.setFont(new java.awt.Font("Dialog", 1, 8)); // NOI18N
        btn_cancelar_tienda.setText("CANCELAR");
        btn_cancelar_tienda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelar_tiendaActionPerformed(evt);
            }
        });

        jl_aviso_tienda.setText("X");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btn_editar_tienda))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel26)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcb_filtrar_tiendas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jl_temporal_tiendas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtf_temporal_tiendas, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(jLabel9)
                    .addComponent(jLabel12)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jtf_telefono_tienda, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtf_telefono2_tienda)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_cancelar_tienda)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_ingresar_tienda))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jtf_email_tienda)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtf_horario_tienda, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jtf_codigo_tienda)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jl_aviso_tienda)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtf_nombre_tienda, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jtf_direccion_tienda)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_codigo_tienda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jtf_nombre_tienda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jl_aviso_tienda))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_direccion_tienda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_email_tienda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(jtf_horario_tienda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_telefono_tienda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15)
                    .addComponent(jtf_telefono2_tienda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_ingresar_tienda)
                    .addComponent(btn_cancelar_tienda))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(jcb_filtrar_tiendas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jl_temporal_tiendas)
                    .addComponent(jtf_temporal_tiendas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_editar_tienda)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Tienda", jPanel2);

        jLabel18.setText("Tienda 1:");

        jcb_tiendas1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SIN SELECCION" }));
        jcb_tiendas1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcb_tiendas1ItemStateChanged(evt);
            }
        });
        jcb_tiendas1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jcb_tiendas1MouseExited(evt);
            }
        });
        jcb_tiendas1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcb_tiendas1ActionPerformed(evt);
            }
        });

        jLabel19.setText("Tienda 2:");

        jcb_tiendas2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SIN SELECCION" }));
        jcb_tiendas2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcb_tiendas2ItemStateChanged(evt);
            }
        });
        jcb_tiendas2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jcb_tiendas2MouseExited(evt);
            }
        });
        jcb_tiendas2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcb_tiendas2ActionPerformed(evt);
            }
        });

        jLabel20.setText("Tiempo entre ambas (días):");

        jtf_dias.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_diasKeyReleased(evt);
            }
        });

        btn_ingresar_tiempo.setText("INGRESAR");
        btn_ingresar_tiempo.setEnabled(false);
        btn_ingresar_tiempo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ingresar_tiempoActionPerformed(evt);
            }
        });

        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel23.setText("LISTADO TIEMPO");

        jt_listado_tiempos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "TIENDA 1", "TIENDA 2", "DIAS"
            }
        ));
        jt_listado_tiempos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jt_listado_tiemposMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jt_listado_tiempos);

        jcb_filtrar_tiempos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TIENDA ACTUAL", "TODAS LAS TIENDAS", "TIENDA ESPECIFICA" }));
        jcb_filtrar_tiempos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcb_filtrar_tiemposItemStateChanged(evt);
            }
        });

        jLabel24.setText("Filtrar por:");

        btn_editar_tiempo.setText("EDITAR");
        btn_editar_tiempo.setEnabled(false);
        btn_editar_tiempo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editar_tiempoActionPerformed(evt);
            }
        });

        jl_temporal_tiempos.setText("TIENDA:");

        jtf_temporal_tiempos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_temporal_tiemposKeyReleased(evt);
            }
        });

        btn_cancelar_tiempo.setText("CANCELAR");
        btn_cancelar_tiempo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelar_tiempoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtf_dias))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcb_tiendas1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcb_tiendas2, 0, 227, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btn_ingresar_tiempo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_cancelar_tiempo))))
            .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane4)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcb_filtrar_tiempos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jl_temporal_tiempos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtf_temporal_tiempos, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btn_editar_tiempo))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jcb_tiendas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(jcb_tiendas2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(jtf_dias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_ingresar_tiempo)
                    .addComponent(btn_cancelar_tiempo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcb_filtrar_tiempos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24)
                    .addComponent(jl_temporal_tiempos)
                    .addComponent(jtf_temporal_tiempos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_editar_tiempo)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Tiempo", jPanel3);

        jt_listado_productos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Nombre", "Fabricante", "Precio", "Descripcion", "Garantia"
            }
        ));
        jt_listado_productos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jt_listado_productosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jt_listado_productos);

        btn_modificar_producto.setText("EDITAR");
        btn_modificar_producto.setEnabled(false);
        btn_modificar_producto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_modificar_productoActionPerformed(evt);
            }
        });

        jLabel27.setText("Codigo:");

        jtf_codigo_producto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_codigo_productoKeyReleased(evt);
            }
        });

        jLabel28.setText("Nombre:");

        jLabel29.setText("Fabricante:");

        jLabel30.setText("Precio:");

        jtf_precio_producto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_precio_productoKeyReleased(evt);
            }
        });

        jLabel31.setText("Descripcion:");

        jta_descripcion_producto.setColumns(20);
        jta_descripcion_producto.setRows(5);
        jta_descripcion_producto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jta_descripcion_productoKeyReleased(evt);
            }
        });
        jScrollPane5.setViewportView(jta_descripcion_producto);

        jLabel32.setText("Garantia:");

        jtf_garantia_producto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_garantia_productoKeyReleased(evt);
            }
        });

        btn_ingresar_producto.setText("INGRESAR");
        btn_ingresar_producto.setEnabled(false);
        btn_ingresar_producto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ingresar_productoActionPerformed(evt);
            }
        });

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("LISTADO PRODUCTOS");

        jLabel17.setText("FILTRAR:");

        jcb_filtrar_productos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TODOS", "POR CODIGO", "POR NOMBRE" }));
        jcb_filtrar_productos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcb_filtrar_productosItemStateChanged(evt);
            }
        });

        jl_temporal_productos.setText("TEMPORAL:");

        btn_cancelar_producto.setText("CANCELAR");
        btn_cancelar_producto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelar_productoActionPerformed(evt);
            }
        });

        jl_codigo_existente.setText("√");

        btn_limpiar_producto.setText("LIMPIAR");
        btn_limpiar_producto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_limpiar_productoActionPerformed(evt);
            }
        });

        jtf_temporal_producto.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtf_temporal_producto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_temporal_productoKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btn_modificar_producto))
            .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcb_filtrar_productos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jl_temporal_productos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtf_temporal_producto, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel31, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel29)
                    .addComponent(jLabel27)
                    .addComponent(btn_limpiar_producto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jtf_codigo_producto, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jl_codigo_existente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel28)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtf_nombre_producto))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jtf_fabricante_producto)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jLabel32)
                                        .addGap(1, 1, 1))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jLabel30)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jtf_precio_producto)
                                    .addComponent(jtf_garantia_producto)))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(btn_ingresar_producto, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_cancelar_producto))))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(jtf_codigo_producto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel28)
                    .addComponent(jtf_nombre_producto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jl_codigo_existente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(jtf_fabricante_producto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel30)
                    .addComponent(jtf_precio_producto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel32)
                            .addComponent(jtf_garantia_producto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_ingresar_producto, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                            .addComponent(btn_cancelar_producto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel31)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_limpiar_producto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jcb_filtrar_productos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jl_temporal_productos)
                    .addComponent(jtf_temporal_producto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_modificar_producto)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Producto", jPanel4);

        jLabel33.setText("Producto:");

        jcb_producto_existencia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SIN SELECCION" }));
        jcb_producto_existencia.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcb_producto_existenciaItemStateChanged(evt);
            }
        });
        jcb_producto_existencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcb_producto_existenciaActionPerformed(evt);
            }
        });

        jLabel34.setText("Tienda:");

        jcb_tienda_existencia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SIN SELECCION" }));
        jcb_tienda_existencia.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcb_tienda_existenciaItemStateChanged(evt);
            }
        });
        jcb_tienda_existencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcb_tienda_existenciaActionPerformed(evt);
            }
        });

        jLabel35.setText("Cantidad:");

        btn_actualizar.setText("INGRESAR");
        btn_actualizar.setEnabled(false);
        btn_actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_actualizarActionPerformed(evt);
            }
        });

        jtf_cantidad_existencia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_cantidad_existenciaKeyReleased(evt);
            }
        });

        jLabel36.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel36.setText("LISTADO EXISTENCIA");

        jLabel37.setText("FILTRAR:");

        jcb_filtrar_existencias.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TODO", "PRODUCTO", "TIENDA" }));
        jcb_filtrar_existencias.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcb_filtrar_existenciasItemStateChanged(evt);
            }
        });

        jl_temporal_existencias.setText("TEMPORAL");

        jt_listado_existencias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo Producto", "Nombre Producto", "Precio", "Cantidad", "Codigo Tienda", "Nombre Tienda"
            }
        ));
        jt_listado_existencias.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jt_listado_existenciasMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(jt_listado_existencias);

        btn_modificar.setText("MODIFICAR");
        btn_modificar.setEnabled(false);
        btn_modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_modificarActionPerformed(evt);
            }
        });

        jcb_temporal_existencias.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SIN SELECCION" }));
        jcb_temporal_existencias.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcb_temporal_existenciasItemStateChanged(evt);
            }
        });

        jtf_temporal_existencias.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtf_temporal_existencias.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_temporal_existenciasKeyReleased(evt);
            }
        });

        btn_cancelar_existencia.setText("CANCELAR");
        btn_cancelar_existencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelar_existenciaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel34, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jcb_tienda_existencia, 0, 109, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel35)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtf_cantidad_existencia, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_actualizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_cancelar_existencia))
                    .addComponent(jcb_producto_existencia, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addComponent(jLabel36, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel37)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcb_filtrar_existencias, 0, 50, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jl_temporal_existencias)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcb_temporal_existencias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtf_temporal_existencias, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane6)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btn_modificar))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(jcb_producto_existencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(jcb_tienda_existencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35)
                    .addComponent(btn_actualizar)
                    .addComponent(jtf_cantidad_existencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_cancelar_existencia))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel36)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37)
                    .addComponent(jcb_filtrar_existencias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jl_temporal_existencias)
                    .addComponent(jcb_temporal_existencias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtf_temporal_existencias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_modificar)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Existencia", jPanel5);

        jLabel38.setText("Codigo:");

        jLabel39.setText("Nombre:");

        jLabel40.setText("Telefono:");

        jLabel41.setText("DPI:");

        jLabel42.setText("NIT:");

        jLabel43.setText("Direccion:");

        jLabel44.setText("Email:");

        btn_ingresar_empleado.setText("INGRESAR");
        btn_ingresar_empleado.setEnabled(false);
        btn_ingresar_empleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ingresar_empleadoActionPerformed(evt);
            }
        });

        jt_listado_empleados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Nombre", "Telefono", "DPI", "Direccion", "Email", "NIT"
            }
        ));
        jt_listado_empleados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jt_listado_empleadosMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(jt_listado_empleados);

        jLabel47.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel47.setText("LISTADO EMPLEADOS");

        jLabel48.setText("FILTRAR:");

        jcb_filtrar_empleados.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TODOS", "POR CODIGO", "POR NOMBRE" }));
        jcb_filtrar_empleados.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcb_filtrar_empleadosItemStateChanged(evt);
            }
        });

        jl_temporal_empleados.setText("TEMPORAL:");

        btn_editar_empleado.setText("EDITAR");
        btn_editar_empleado.setEnabled(false);
        btn_editar_empleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editar_empleadoActionPerformed(evt);
            }
        });

        jtf_temporal_empleados.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtf_temporal_empleados.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtf_temporal_empleadosKeyReleased(evt);
            }
        });

        btn_cancelar_empleado.setText("CANCELAR");
        btn_cancelar_empleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelar_empleadoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel38)
                    .addComponent(jLabel40))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jtf_telefono_empleado, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel41))
                    .addComponent(jtf_codigo_empleado))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jtf_dpi_empleado, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel42)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtf_nit_empleado))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel39)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtf_nombre_empleado))))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel43)
                    .addComponent(jLabel44))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtf_direccion_empleado)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jtf_email_empleado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_ingresar_empleado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_cancelar_empleado))))
            .addComponent(jScrollPane7)
            .addComponent(jLabel47, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(0, 483, Short.MAX_VALUE)
                .addComponent(btn_editar_empleado))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel48)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcb_filtrar_empleados, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jl_temporal_empleados)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtf_temporal_empleados, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel38)
                    .addComponent(jtf_codigo_empleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel39)
                    .addComponent(jtf_nombre_empleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel40)
                    .addComponent(jtf_telefono_empleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel41)
                    .addComponent(jtf_dpi_empleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel42)
                    .addComponent(jtf_nit_empleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel43)
                    .addComponent(jtf_direccion_empleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel44)
                    .addComponent(jtf_email_empleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_ingresar_empleado)
                    .addComponent(btn_cancelar_empleado))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel47)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel48)
                    .addComponent(jcb_filtrar_empleados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtf_temporal_empleados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jl_temporal_empleados))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_editar_empleado))
        );

        jTabbedPane1.addTab("Empleado", jPanel6);

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("INGRESAR");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jtf_direccion_tiendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtf_direccion_tiendaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_direccion_tiendaActionPerformed

    private void jcb_filtrar_clientesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcb_filtrar_clientesItemStateChanged
        String seleccionado = (String) jcb_filtrar_clientes.getSelectedItem();
        limpiar_tablas(jt_listado_clientes);
        boolean mostrar = seleccionado.equalsIgnoreCase("POR NIT") || seleccionado.equalsIgnoreCase("POR NOMBRE");
        if (mostrar) {
            if (seleccionado.equalsIgnoreCase("POR NIT")) {
                jl_temporal.setText("NIT:");
            } else {
                jl_temporal.setText("Nombre:");
            }
            jtf_filtrar_temporal.setText("");
        }
        jl_temporal.setVisible(mostrar);
        jtf_filtrar_temporal.setVisible(mostrar);
        rellenar_tabla_clientes();
    }//GEN-LAST:event_jcb_filtrar_clientesItemStateChanged

    private void jcb_filtrar_tiendasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcb_filtrar_tiendasItemStateChanged
        String s = (String) jcb_filtrar_tiendas.getSelectedItem();
        boolean mostrar = s.equalsIgnoreCase("POR CODIGO") || s.equalsIgnoreCase("POR NOMBRE");
        limpiar_tablas(jt_listado_tiendas);
        if (mostrar) {
            if (s.equalsIgnoreCase("POR CODIGO")) {
                jl_temporal_tiendas.setText("Codigo:");
            } else {
                jl_temporal_tiendas.setText("Nombre:");
            }
            jtf_temporal_tiendas.setText("");
        }
        jl_temporal_tiendas.setVisible(mostrar);
        jtf_temporal_tiendas.setVisible(mostrar);
        rellenar_tabla_tiendas();

        btn_editar_tienda.setEnabled(jt_listado_tiendas.getSelectedRow() != -1);
    }//GEN-LAST:event_jcb_filtrar_tiendasItemStateChanged

    private void btn_ingresar_productoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ingresar_productoActionPerformed
        String codigo_producto = jtf_codigo_producto.getText();
        String nombre_producto = jtf_nombre_producto.getText();
        String fabricante = jtf_fabricante_producto.getText();
        Double precio = Double.parseDouble(jtf_precio_producto.getText());
        String descripcion = jta_descripcion_producto.getText();
        int garantia = Integer.parseInt(jtf_garantia_producto.getText());

        if (btn_ingresar_producto.getText().equalsIgnoreCase("INGRESAR")) {
            if (!jl_codigo_existente.getText().equalsIgnoreCase("X")) {
                JComboBox jcb = new JComboBox();
                ArrayList<TiendaDTO> t = listado_todas_tiendas;
                for (int i = 0; i < t.size(); i++) {
                    jcb.addItem(t.get(i).getCodigo_tienda() + "|" + t.get(i).getNombre());
                }
                JTextField jtf = new JTextField();
                JLabel jl1 = new JLabel("Cantidad");
                JLabel jl2 = new JLabel("Tienda");
                JPanel jp = new JPanel();
                jtf.setEditable(true);
                jtf.setHorizontalAlignment(JTextField.CENTER);
                TextPrompt nuevo = new TextPrompt("Cantidad", jtf);
                jtf.addKeyListener(new KeyListener() {
                    @Override
                    public void keyTyped(KeyEvent ke) {

                    }

                    @Override
                    public void keyPressed(KeyEvent ke) {

                    }

                    @Override
                    public void keyReleased(KeyEvent ke) {
                        String e = jtf.getText();
                        String tm = "";
                        char c = ke.getKeyChar();
                        if (ke.getKeyCode() != 8) {
                            if (!Character.isDigit(c)) {
                                if (e.length() > 0) {
                                    for (int i = 0; i < (e.length() - 1); i++) {
                                        if (Character.isDigit(e.charAt(i))) {
                                            tm += e.charAt(i) + "";
                                        }
                                    }
                                    jtf.setText(tm);
                                } else {
                                    jtf.setText("");
                                }
                                JOptionPane.showMessageDialog(jp, new JLabel("Ingresaste un caracter invalido, solo se permiten numeros"), "ERROR", JOptionPane.OK_OPTION);
                            }
                        }
                    }

                });
                jcb.setEditable(true);
                jp.setLayout(new GridLayout(2, 2));
                jp.add(jl1);
                jp.add(jtf);
                jp.add(jl2);
                jp.add(jcb);
                boolean correcto = false;
                while (!correcto) {
                    int opcion = JOptionPane.showConfirmDialog(null, jp, "Ingresa la existencia del producto nuevo", JOptionPane.OK_CANCEL_OPTION);
                    if (opcion == 0) {
                        if (jtf.getText().length() > 0) {
                            correcto = true;
                        } else {
                            JOptionPane.showMessageDialog(null, new JLabel("Ingresa los datos solicitados"), "ERROR", JOptionPane.OK_OPTION);
                        }
                    } else {
                        correcto = true;
                        JOptionPane.showMessageDialog(null, new JLabel("<html><body>No se ingreso el registro por falta de datos<br>Intenta de nuevo</body></html>"), "ERROR", JOptionPane.YES_OPTION);
                    }
                }
                if (correcto && jtf.getText().length() > 0) {
                    String codigo_tienda1 = decodificar(jcb.getSelectedItem().toString());
                    int cantidad = Integer.parseInt(jtf.getText());

                    JPanel jp1 = new JPanel();
                    jp1.setLayout(new GridLayout(5, 2));
                    String[] valores1 = {codigo_producto, nombre_producto, fabricante, "Q" + precio, descripcion, garantia + "", codigo_tienda1, cantidad + ""};
                    jp1.add(new JLabel("Será ingresado el siguiente producto "));
                    jp1.add(new JLabel("¿están todos los datos correctos?"));
                    String[] valores2 = {"CODIGO: ", "NOMBRE: ", "FABRICANTE: ", "PRECIO: ", "DESCRIPCION: ", "GARANTIA: ", "TIENDA: ", "CANTIDAD: "};
                    for (int i = 0; i < valores2.length; i++) {
                        if (i != 4) {
                            JTextField tx = new JTextField(valores2[i] + "   " + valores1[i]);
                            tx.setEnabled(false);
                            tx.setHorizontalAlignment(SwingConstants.CENTER);
                            jp1.add(tx);
                        } else {
                            JTextArea tx = new JTextArea(valores2[i] + "   " + valores1[i]);
                            tx.setEnabled(false);
                            jp1.add(tx);
                        }
                    }
                    int opcion = JOptionPane.showConfirmDialog(null, jp1, "CONFIRMAR INGRESO PRODUCTO", JOptionPane.YES_NO_OPTION);
                    if (opcion == JOptionPane.YES_OPTION) {
                        ProductoDAO prod = new ProductoDAO(base);
                        String result = prod.ingreso_producto(codigo_producto, nombre_producto, fabricante, precio, descripcion, garantia, codigo_tienda1, cantidad);
                        if (result.equalsIgnoreCase("INGRESADO")) {
                            JOptionPane.showMessageDialog(null, new JLabel("PRODUCTO " + codigo_producto + " INGRESADO EXISTOSAMENTE"), "INGRESO PRODUCTO", JOptionPane.OK_OPTION);
                        } else {
                            JOptionPane.showMessageDialog(null, new JLabel(result), "INGRESO PRODUCTO", JOptionPane.ERROR_MESSAGE);
                        }
                        limpiar_tablas(jt_listado_productos);
                        listado_todos_productos = prod.obtener_existencias();
                        ArrayList<ProductoDTO> l = listado_productos();
                        rellenar_tabla_productos(l);
                        jcb_filtrar_productos.setSelectedItem("TODOS");
                        jtf_temporal_producto.setVisible(false);
                        jl_temporal_productos.setVisible(false);
                        limpiar_campos_producto();
                    } else {
                        JOptionPane.showMessageDialog(null, new JLabel("No se ingreso nada, tendrás que escribir de nuevo la cantidad y la tienda del producto"), "INGRESO PRODUCTO", JOptionPane.OK_OPTION);
                    }

                }
            } else {
                JOptionPane.showMessageDialog(null, new JLabel("<html><body>El codigo de producto ya existe<br>Ingresa uno nuevo</body></html>"), "ERROR", JOptionPane.YES_OPTION);
            }
        } else {
            String[] valores1 = {"CODIGO: ", "NOMBRE: ", "FABRICANTE: ", "PRECIO(Q): ", "DESCRIPCION: ", "GARANTIA"};
            JTextField[] jtfs = {jtf_codigo_producto, jtf_nombre_producto, jtf_fabricante_producto, jtf_precio_producto, new JTextField(descripcion), jtf_garantia_producto};
            if (confirmar_ingreso_actualizacion("Será actualizado el siguiente producto ", jtfs, valores1, "ACTUALIZACION PRODUCTO") == JOptionPane.YES_OPTION) {
                ProductoDAO prod = new ProductoDAO(base);
                if (prod.actualizar_producto(codigo_producto, nombre_producto, fabricante, precio, descripcion, garantia, codigo_producto_cambio)) {
                    JOptionPane.showMessageDialog(null, new JLabel("PRODUCTO " + codigo_producto + " ACTUALIZADO EXISTOSAMENTE"), "ACTUALIZACION PRODUCTO", JOptionPane.OK_OPTION);
                    limpiar_tablas(jt_listado_productos);
                    listado_todos_productos = prod.obtener_existencias();
                    ArrayList<ProductoDTO> l = listado_productos();
                    rellenar_tabla_productos(l);
                    jcb_filtrar_productos.setSelectedItem("TODOS");
                    jtf_temporal_producto.setVisible(false);
                    jl_temporal_productos.setVisible(false);
                    btn_ingresar_producto.setText("INGRESAR");
                    btn_cancelar_producto.setVisible(false);
                    limpiar_campos_producto();
                } else {
                    JOptionPane.showMessageDialog(null, new JLabel("ERROR: no se conectó correctamente con la base de datos"), "ACTUALIZACION PRODUCTO", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_btn_ingresar_productoActionPerformed

    private void jcb_filtrar_productosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcb_filtrar_productosItemStateChanged
        String s = (String) jcb_filtrar_productos.getSelectedItem();
        limpiar_tablas(jt_listado_productos);
        boolean mostrar = s.equalsIgnoreCase("POR CODIGO") || s.equalsIgnoreCase("POR NOMBRE");
        ArrayList<ProductoDTO> l = listado_productos();
        if (mostrar) {
            if (s.equalsIgnoreCase("POR CODIGO")) {
                jl_temporal_productos.setText("Codigo:");
            } else {
                jl_temporal_productos.setText("Nombre:");
            }
            jtf_temporal_producto.setText("");

        }
        rellenar_tabla_productos(l);
        jl_temporal_productos.setVisible(mostrar);
        jtf_temporal_producto.setVisible(mostrar);
        btn_modificar_producto.setEnabled(jt_listado_productos.getSelectedRow() != -1);
    }//GEN-LAST:event_jcb_filtrar_productosItemStateChanged

    private void jcb_filtrar_existenciasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcb_filtrar_existenciasItemStateChanged
        String s = (String) jcb_filtrar_existencias.getSelectedItem();
        limpiar_tablas(jt_listado_existencias);
        boolean mostrar = s.equalsIgnoreCase("PRODUCTO") || s.equalsIgnoreCase("TIENDA");
        if (mostrar) {
            if (s.equalsIgnoreCase("PRODUCTO")) {
                jl_temporal_existencias.setText("Producto:");
                tp_existencias.setText("Ingresa codigo/nombre producto");
            } else if (s.equalsIgnoreCase("TIENDA")) {
                jl_temporal_existencias.setText("Tienda:");
                tp_existencias.setText("Ingresa codigo/nombre tienda");
            }
            jtf_temporal_existencias.setText("");
        }
        rellenar_tabla_existencias();
        jl_temporal_existencias.setVisible(mostrar);
        jtf_temporal_existencias.setVisible(mostrar);
    }//GEN-LAST:event_jcb_filtrar_existenciasItemStateChanged

    private void jcb_temporal_existenciasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcb_temporal_existenciasItemStateChanged
        ArrayList<ProductoDTO> l = listado_productos();
        limpiar_tablas(jt_listado_existencias);
        String s = jcb_filtrar_existencias.getSelectedItem().toString();
        String s2 = jcb_temporal_existencias.getSelectedItem().toString();
        if (!s.equalsIgnoreCase("TODO")) {
            if (s2.length() != 0) {
                String o = jl_temporal_existencias.getText();
                if (o.equalsIgnoreCase("Producto:")) {
                    rellenar_tabla_existencias_cproducto(decodificar(s2));
                } else if (o.equalsIgnoreCase("Tienda:")) {
                    rellenar_tabla_existencias_ctienda(decodificar(s2));
                }
            }
        }
    }//GEN-LAST:event_jcb_temporal_existenciasItemStateChanged

    private void jt_listado_existenciasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt_listado_existenciasMouseClicked
        habilitar_boton_editar(jt_listado_existencias, btn_modificar);
    }//GEN-LAST:event_jt_listado_existenciasMouseClicked

    private void btn_modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_modificarActionPerformed
        int fila_existencias = jt_listado_existencias.getSelectedRow();
        int cantidad = (int) jt_listado_existencias.getValueAt(fila_existencias, 3);
        cantidad_inicial = cantidad + "";
        String tienda_codificado = (String) jt_listado_existencias.getValueAt(fila_existencias, 4) + "|" + (String) jt_listado_existencias.getValueAt(fila_existencias, 5);
        String producto_codificado = (String) jt_listado_existencias.getValueAt(fila_existencias, 0) + "|" + (String) jt_listado_existencias.getValueAt(fila_existencias, 1);
        String tienda_c = (String) jt_listado_existencias.getValueAt(fila_existencias, 4);
        String producto_c = (String) jt_listado_existencias.getValueAt(fila_existencias, 0);
        codigo_existente = obtener_id_existencia(decodificar(producto_c), decodificar(tienda_c));
        jcb_producto_existencia.setSelectedItem(producto_codificado);
        jcb_producto_existencia.setEnabled(false);
        jcb_tienda_existencia.setSelectedItem(tienda_codificado);
        jcb_tienda_existencia.setEnabled(false);
        jtf_cantidad_existencia.setText(cantidad + "");
        btn_cancelar_existencia.setVisible(true);
        btn_actualizar.setText("ACTUALIZAR");
    }//GEN-LAST:event_btn_modificarActionPerformed

    private void jtf_cantidad_existenciaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_cantidad_existenciaKeyReleased
        String e = jtf_cantidad_existencia.getText();
        String tm = "";
        char c = evt.getKeyChar();
        if (evt.getKeyCode() != 8) {
            if (!Character.isDigit(c)) {
                if (e.length() > 0) {
                    for (int i = 0; i < (e.length() - 1); i++) {
                        if (Character.isDigit(e.charAt(i))) {
                            tm += e.charAt(i) + "";
                        }
                    }
                    jtf_cantidad_existencia.setText(tm);
                } else {
                    jtf_cantidad_existencia.setText("");
                }
            }
        }
        verificar_existencia();
    }//GEN-LAST:event_jtf_cantidad_existenciaKeyReleased

    private void jcb_producto_existenciaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcb_producto_existenciaItemStateChanged
        verificar_existencia();
    }//GEN-LAST:event_jcb_producto_existenciaItemStateChanged

    private void jcb_tienda_existenciaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcb_tienda_existenciaItemStateChanged
        verificar_existencia();
    }//GEN-LAST:event_jcb_tienda_existenciaItemStateChanged

    private void btn_modificar_productoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_modificar_productoActionPerformed
        JTable j = jt_listado_productos;
        int fila_productos = j.getSelectedRow();
        String codigo_producto = (String) j.getValueAt(fila_productos, 0);
        String nombre_producto = (String) j.getValueAt(fila_productos, 1);
        String fabricante = (String) j.getValueAt(fila_productos, 2);
        String precio = j.getValueAt(fila_productos, 3) + "";
        String descripcion = (String) j.getValueAt(fila_productos, 4);
        String garantia = j.getValueAt(fila_productos, 5) + "";
        codigo_producto_cambio = codigo_producto;
        jtf_codigo_producto.setText(codigo_producto);
        jtf_nombre_producto.setText(nombre_producto);
        jtf_fabricante_producto.setText(fabricante);
        jtf_precio_producto.setText(precio);
        jta_descripcion_producto.setText(descripcion);
        jtf_garantia_producto.setText(garantia);
        jl_codigo_existente.setVisible(false);
        btn_ingresar_producto.setText("ACTUALIZAR");
        btn_cancelar_producto.setVisible(true);
    }//GEN-LAST:event_btn_modificar_productoActionPerformed

    private void jt_listado_productosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt_listado_productosMouseClicked
        habilitar_boton_editar(jt_listado_productos, btn_modificar_producto);
    }//GEN-LAST:event_jt_listado_productosMouseClicked

    private void btn_cancelar_productoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelar_productoActionPerformed
        jtf_codigo_producto.setText("");
        jtf_codigo_producto.setEditable(true);
        jtf_nombre_producto.setText("");
        jtf_fabricante_producto.setText("");
        jtf_precio_producto.setText("");
        jta_descripcion_producto.setText("");
        jtf_garantia_producto.setText("");
        btn_ingresar_producto.setText("INGRESAR");
        btn_cancelar_producto.setVisible(false);
        codigo_producto_cambio = "";
    }//GEN-LAST:event_btn_cancelar_productoActionPerformed

    private void jtf_codigo_productoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_codigo_productoKeyReleased
        ArrayList<ProductoDTO> productos = listado_productos();
        jl_codigo_existente.setVisible(true);
        boolean existe = false;
        for (ProductoDTO p : productos) {
            if (p.getCodigo_producto().equalsIgnoreCase(jtf_codigo_producto.getText())) {
                existe = true;
                break;
            }
        }
        if (btn_ingresar_producto.getText().equalsIgnoreCase("INGRESAR")) {
            if (existe) {
                jl_codigo_existente.setText("X");
                jl_codigo_existente.setForeground(Color.red);
                jl_codigo_existente.setToolTipText("Este codigo ya existe, ingresa uno nuevo");
            } else {
                if (jtf_codigo_producto.getText().length() > 0) {
                    jl_codigo_existente.setText("√");
                    jl_codigo_existente.setForeground(Color.green);
                    jl_codigo_existente.setToolTipText("Codigo correcto");
                } else {
                    jl_codigo_existente.setText("X");
                    jl_codigo_existente.setForeground(Color.red);
                    jl_codigo_existente.setToolTipText("No puedes dejar este campo vacio");
                }
            }
        } else {
            if (!jtf_codigo_producto.getText().equalsIgnoreCase(codigo_producto_cambio)) {
                if (existe) {
                    jl_codigo_existente.setText("X");
                    jl_codigo_existente.setForeground(Color.red);
                    jl_codigo_existente.setToolTipText("Este codigo ya existe, ingresa uno nuevo");
                } else {
                    if (jtf_codigo_producto.getText().length() > 0) {
                        jl_codigo_existente.setText("√");
                        jl_codigo_existente.setForeground(Color.green);
                        jl_codigo_existente.setToolTipText("Codigo correcto");
                    } else {
                        jl_codigo_existente.setText("X");
                        jl_codigo_existente.setForeground(Color.red);
                        jl_codigo_existente.setToolTipText("No puedes dejar este campo vacio");
                    }
                }
            } else {
                jl_codigo_existente.setVisible(false);
            }
        }
        verificar_producto();
    }//GEN-LAST:event_jtf_codigo_productoKeyReleased
    int puntos = 0;
    private void jtf_precio_productoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_precio_productoKeyReleased
        String e = jtf_precio_producto.getText();
        String tm = "";
        char c = evt.getKeyChar();
        if (evt.getKeyCode() != 8) {
            if (!Character.isDigit(c) || c == '.') {
                if (e.length() > 0) {
                    if (c != '.') {
                        int tope = e.length() - 1;
                        for (int i = 0; i < tope; i++) {
                            if (Character.isDigit(e.charAt(i)) || e.charAt(i) == '.') {
                                tm += e.charAt(i) + "";
                            }
                        }
                        jtf_precio_producto.setText(tm);
                        JOptionPane.showMessageDialog(this, new JLabel("Ingresaste un caracter invalido, solo se permiten numeros"), "ERROR", JOptionPane.OK_OPTION);
                    } else {
                        if (puntos == 0) {
                            puntos++;
                        } else {
                            int tope = e.length() - 1;
                            for (int i = 0; i < tope; i++) {
                                if (Character.isDigit(e.charAt(i)) || e.charAt(i) == '.') {
                                    tm += e.charAt(i) + "";
                                }
                            }
                            jtf_precio_producto.setText(tm);
                            JOptionPane.showMessageDialog(this, new JLabel("Ingresaste un caracter invalido, solo se puede tener un punto"), "ERROR", JOptionPane.OK_OPTION);
                        }
                    }
                } else {
                    System.out.println(e);
                    jtf_precio_producto.setText("");
                }
            }
        }
        verificar_producto();
    }//GEN-LAST:event_jtf_precio_productoKeyReleased

    private void jtf_garantia_productoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_garantia_productoKeyReleased
        String e = jtf_garantia_producto.getText();
        String tm = "";
        char c = evt.getKeyChar();
        if (evt.getKeyCode() != 8) {
            if (!Character.isDigit(c)) {
                if (e.length() > 0) {
                    for (int i = 0; i < (e.length() - 1); i++) {
                        if (Character.isDigit(e.charAt(i))) {
                            tm += e.charAt(i) + "";
                        }
                    }
                    jtf_garantia_producto.setText(tm);
                } else {
                    jtf_garantia_producto.setText("");
                }
            }
        }
        verificar_producto();
    }//GEN-LAST:event_jtf_garantia_productoKeyReleased

    private void jta_descripcion_productoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jta_descripcion_productoKeyReleased
        verificar_producto();
    }//GEN-LAST:event_jta_descripcion_productoKeyReleased

    private void btn_limpiar_productoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_limpiar_productoActionPerformed
        limpiar_campos_producto();
    }//GEN-LAST:event_btn_limpiar_productoActionPerformed

    private void jtf_filtrar_temporalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_filtrar_temporalKeyReleased
        limpiar_tablas(jt_listado_clientes);
        if (!jtf_filtrar_temporal.getText().isEmpty()) {
            String es = jtf_filtrar_temporal.getText();
            String ve = jl_temporal.getText();
            rellenar_tabla_clientes(ve, es);
        } else {
            rellenar_tabla_clientes();
        }
    }//GEN-LAST:event_jtf_filtrar_temporalKeyReleased

    private void jt_listado_clientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt_listado_clientesMouseClicked
        habilitar_boton_editar(jt_listado_clientes, btn_editar_cliente);
    }//GEN-LAST:event_jt_listado_clientesMouseClicked

    private void btn_editar_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editar_clienteActionPerformed

        rellenar_campos("CLIENTE", btn_ingresar_cliente, jt_listado_clientes);
        if (btn_ingresar_cliente.getText().equalsIgnoreCase("ACTUALIZAR")) {
            btn_cancelar_cliente.setVisible(true);
            jtf_nit_cliente.setEditable(false);
        } else {
            btn_cancelar_cliente.setVisible(false);
        }
    }//GEN-LAST:event_btn_editar_clienteActionPerformed

    private void jtf_temporal_tiendasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_temporal_tiendasKeyReleased
        limpiar_tablas(jt_listado_tiendas);
        if (!jtf_temporal_tiendas.getText().isEmpty()) {
            String es = jtf_temporal_tiendas.getText();
            String ve = jl_temporal_tiendas.getText();
            rellenar_tabla_tiendas(ve, es);
        } else {
            rellenar_tabla_tiendas();
        }
    }//GEN-LAST:event_jtf_temporal_tiendasKeyReleased

    private void jt_listado_tiendasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt_listado_tiendasMouseClicked
        habilitar_boton_editar(jt_listado_tiendas, btn_editar_tienda);
    }//GEN-LAST:event_jt_listado_tiendasMouseClicked

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        int actual = jTabbedPane1.getSelectedIndex();
        if (panel_seleccionado != actual) {
            if (panel_seleccionado == 3) {
                String[] jtfs = {jtf_codigo_producto.getText(),
                    jtf_nombre_producto.getText(), jtf_fabricante_producto.getText(), jtf_precio_producto.getText(),
                    jta_descripcion_producto.getText(), jtf_garantia_producto.getText()};
                if (!jtf_vacios(jtfs)) {
                    int opcion = JOptionPane.showConfirmDialog(null, new JLabel("Aún tienes datos de un producto en el tintero, ¿cambiar de pestaña?"), "CAMBIO PESTAÑA", JOptionPane.OK_CANCEL_OPTION);
                    if (opcion == 1) {
                        jTabbedPane1.setSelectedIndex(panel_seleccionado);
                    } else {
                        limpiar_campos_producto();
                        panel_seleccionado = actual;
                    }
                }
            } else if (panel_seleccionado == 2) {
                
            }
            panel_seleccionado = actual;
        }
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void btn_editar_tiendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editar_tiendaActionPerformed
        rellenar_campos("TIENDA", btn_ingresar_tienda, jt_listado_tiendas);
        if (btn_ingresar_tienda.getText().equalsIgnoreCase("ACTUALIZAR")) {
            btn_cancelar_tienda.setVisible(true);
            jl_aviso_tienda.setVisible(false);
        } else {
            btn_cancelar_tienda.setVisible(false);
        }
        codigo_tienda = jtf_codigo_tienda.getText();
    }//GEN-LAST:event_btn_editar_tiendaActionPerformed

    private void jTabbedPane1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseEntered

    }//GEN-LAST:event_jTabbedPane1MouseEntered

    private void btn_ingresar_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ingresar_clienteActionPerformed
        String nit = jtf_nit_cliente.getText();
        ArrayList<ClienteDTO> clientes = listado_todos_clientes;
        ClienteDTO encontrado = new ClienteDTO();
        boolean si = false;
        for (ClienteDTO c : clientes) {
            if (c.getNit().equalsIgnoreCase(nit)) {
                encontrado = c;
                si = true;
                break;
            }
        }

        if (btn_ingresar_cliente.getText().equalsIgnoreCase("INGRESAR") && !si) {
            JTextField[] jtext = jtfs("CLIENTE");
            if (!jtf_vacios(jtext, 3)) {
                if (JOptionPane.YES_OPTION == confirmar_ingreso_actualizacion("Será ingresado el siguiente cliente ", jtext,
                        new String[]{"NIT: ", "NOMBRE: ", "TELEFONO: ", "CREDITO: ", "DPI: ", "DIRECCION: ", "EMAIL: "}, "INGRESO CLIENTE")) {
                    ClienteDAO cli = new ClienteDAO(base);
                    if (cli.ingreso_cliente(jtext[0].getText(), jtext[1].getText(), jtext[2].getText(), Double.parseDouble(jtext[3].getText()), jtext[4].getText(),
                            jtext[5].getText(), jtext[6].getText())) {
                        JOptionPane.showConfirmDialog(null, new JLabel("CLIENTE INGRESADO EXITOSAMENTE"), "INGRESO CLIENTE", JOptionPane.OK_OPTION);
                        limpiar_campos(jtext);
                        listado_todos_clientes = cli.obtener_clientes();
                        limpiar_tablas(jt_listado_clientes);
                        rellenar_tabla_clientes();
                    } else {
                        JOptionPane.showConfirmDialog(null, new JLabel("OCURRIO UN ERROR CON LA BASE DE DATOS, INTENTA DE NUEVO"), "INGRESO CLIENTE", JOptionPane.OK_OPTION);
                    }
                }
            } else {
                JOptionPane.showConfirmDialog(null, new JLabel("TIENES CAMPOS OBLIGATORIOS VACIOS, LLENALOS"), "ERROR", JOptionPane.OK_OPTION);
            }
        } else {
            JTextField[] jtext = jtfs("CLIENTE");
            if (JOptionPane.YES_OPTION == confirmar_ingreso_actualizacion("Será actualizado el siguiente cliente ", jtext,
                    new String[]{"NIT: ", "NOMBRE: ", "TELEFONO: ", "CREDITO: ", "DPI: ", "DIRECCION: ", "EMAIL: "}, "ACTUALIZACION CLIENTE")) {
                ClienteDAO cli = new ClienteDAO(base);
                if (cli.actualizar_cliente(jtext[0].getText(), jtext[1].getText(), jtext[2].getText(), Double.parseDouble(jtext[3].getText()), jtext[4].getText(),
                        jtext[5].getText(), jtext[6].getText())) {
                    JOptionPane.showConfirmDialog(null, new JLabel("CLIENTE ACTUALIZADO EXITOSAMENTE"), "ACTUALIZACION CLIENTE", JOptionPane.OK_OPTION);
                    limpiar_campos(jtext);
                    listado_todos_clientes = cli.obtener_clientes();
                    limpiar_tablas(jt_listado_clientes);
                    rellenar_tabla_clientes();
                } else {
                    JOptionPane.showConfirmDialog(null, new JLabel("OCURRIO UN ERROR CON LA BASE DE DATOS, INTENTA DE NUEVO"), "ACTUALIZACION CLIENTE", JOptionPane.OK_OPTION);
                }
            }
        }
    }//GEN-LAST:event_btn_ingresar_clienteActionPerformed

    private void btn_cancelar_tiendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelar_tiendaActionPerformed
        JTextField[] jtf = jtfs("TIENDA");
        limpiar_campos(jtf);
        btn_ingresar_tienda.setText("INGRESAR");
        btn_cancelar_tienda.setVisible(false);
        jtf_codigo_tienda.setEditable(true);
        jl_aviso_tienda.setVisible(false);
    }//GEN-LAST:event_btn_cancelar_tiendaActionPerformed

    private void btn_cancelar_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelar_clienteActionPerformed
        JTextField[] jtf = jtfs("CLIENTE");
        limpiar_campos(jtf);
        btn_ingresar_cliente.setText("INGRESAR");
        btn_cancelar_cliente.setVisible(false);
        jtf_nit_cliente.setEditable(true);
        btn_ingresar_cliente.setEnabled(false);
    }//GEN-LAST:event_btn_cancelar_clienteActionPerformed

    private void jtf_temporal_productoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_temporal_productoKeyReleased
        ArrayList<ProductoDTO> l = listado_productos();
        limpiar_tablas(jt_listado_productos);
        if (!jtf_temporal_producto.getText().isEmpty()) {
            rellenar_tabla_productos(l, jtf_temporal_producto.getText());
        } else {
            rellenar_tabla_productos(l);
        }
    }//GEN-LAST:event_jtf_temporal_productoKeyReleased

    private void jtf_temporal_existenciasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_temporal_existenciasKeyReleased
        limpiar_tablas(jt_listado_existencias);
        if (!jtf_temporal_existencias.getText().isEmpty()) {
            String es = jtf_temporal_existencias.getText();
            String ve = jl_temporal_existencias.getText();
            rellenar_tabla_existencias(ve, es);
        } else {
            rellenar_tabla_existencias();
        }
    }//GEN-LAST:event_jtf_temporal_existenciasKeyReleased

    private void jcb_filtrar_empleadosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcb_filtrar_empleadosItemStateChanged
        limpiar_tablas(jt_listado_empleados);
        String s = (String) jcb_filtrar_empleados.getSelectedItem();
        boolean mostrar = s.equalsIgnoreCase("POR CODIGO") || s.equalsIgnoreCase("POR NOMBRE");
        if (mostrar) {
            if (s.equalsIgnoreCase("POR CODIGO")) {
                jl_temporal_empleados.setText("Codigo:");
            } else {
                jl_temporal_empleados.setText("Nombre:");
            }
            jtf_temporal_empleados.setText("");
        }
        jl_temporal_empleados.setVisible(mostrar);
        jtf_temporal_empleados.setVisible(mostrar);
        rellenar_tabla_empleados();
        btn_editar_empleado.setEnabled(jt_listado_empleados.getSelectedRow() != -1);
    }//GEN-LAST:event_jcb_filtrar_empleadosItemStateChanged

    private void jtf_temporal_empleadosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_temporal_empleadosKeyReleased
        limpiar_tablas(jt_listado_empleados);
        if (!jtf_temporal_empleados.getText().isEmpty()) {
            String es = jtf_temporal_empleados.getText();
            String ve = jl_temporal_empleados.getText();
            rellenar_tabla_empleados(ve, es);
        } else {
            rellenar_tabla_empleados();
        }
    }//GEN-LAST:event_jtf_temporal_empleadosKeyReleased

    private void jt_listado_empleadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt_listado_empleadosMouseClicked
        habilitar_boton_editar(jt_listado_empleados, btn_editar_empleado);
    }//GEN-LAST:event_jt_listado_empleadosMouseClicked

    private void btn_editar_empleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editar_empleadoActionPerformed
        rellenar_campos("EMPLEADO", btn_ingresar_empleado, jt_listado_empleados);
        if (btn_ingresar_empleado.getText().equalsIgnoreCase("ACTUALIZAR")) {
            btn_cancelar_empleado.setVisible(true);
        } else {
            btn_cancelar_empleado.setVisible(false);
        }
    }//GEN-LAST:event_btn_editar_empleadoActionPerformed

    private void btn_cancelar_empleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelar_empleadoActionPerformed
        if (btn_ingresar_empleado.getText().equalsIgnoreCase("ACTUALIZAR")) {
            limpiar_campos(jtfs("EMPLEADO"));
            btn_cancelar_empleado.setVisible(false);
            jtf_codigo_empleado.setEditable(true);
            btn_ingresar_empleado.setText("INGRESAR");
        }
    }//GEN-LAST:event_btn_cancelar_empleadoActionPerformed

    private void jcb_filtrar_tiemposItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcb_filtrar_tiemposItemStateChanged
        String s = jcb_filtrar_tiempos.getSelectedItem().toString();
        limpiar_tablas(jt_listado_tiempos);
        if (s.equalsIgnoreCase("TIENDA ESPECIFICA")) {
            jl_temporal_tiempos.setVisible(true);
            jtf_temporal_tiempos.setVisible(true);
            jtf_temporal_tiempos.setText("");
            rellenar_tabla_tiempos();
        } else {
            if (s.equalsIgnoreCase("TIENDA ACTUAL")) {
                rellenar_tabla_tiempos(getCodigo_tienda_actual());
            } else {
                rellenar_tabla_tiempos();
            }
            jl_temporal_tiempos.setVisible(false);
            jtf_temporal_tiempos.setVisible(false);
            jtf_temporal_tiempos.setText("");
        }
    }//GEN-LAST:event_jcb_filtrar_tiemposItemStateChanged

    private void jtf_temporal_tiemposKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_temporal_tiemposKeyReleased
        rellenar_tabla_tiempos(jtf_temporal_tiempos.getText());
    }//GEN-LAST:event_jtf_temporal_tiemposKeyReleased

    private void jt_listado_tiemposMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt_listado_tiemposMouseClicked
        btn_editar_tiempo.setEnabled(jt_listado_tiempos.getRowCount() > 0);
    }//GEN-LAST:event_jt_listado_tiemposMouseClicked

    private void btn_ingresar_empleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ingresar_empleadoActionPerformed
        ArrayList<EmpleadoDTO> empleado = listado_todos_empleados;
        EmpleadoDTO emp = new EmpleadoDTO();
        String cod = jtf_codigo_empleado.getText();
        boolean si = false;
        for (EmpleadoDTO c : empleado) {
            if (c.getCodigo_empleado().toUpperCase().equalsIgnoreCase(cod.toUpperCase())) {
                emp = c;
                si = true;
                break;
            }
        }

        if (btn_ingresar_empleado.getText().equalsIgnoreCase("INGRESAR") && !si) {
            JTextField[] jtext = jtfs("EMPLEADO");
            if (!jtf_vacios(jtext, 6)) {
                if (JOptionPane.YES_OPTION == confirmar_ingreso_actualizacion("Será ingresado el siguiente empleado ", jtext,
                        new String[]{"CODIGO EMPLEADO: ", "NOMBRE: ", "TELEFONO: ", "DPI: ", "DIRECCION: ", "EMAIL: ", "NIT: "}, "INGRESO EMPLEADO")) {
                    EmpleadoDAO empl = new EmpleadoDAO(base);
                    if (empl.ingreso_empleado(jtext[0].getText(), jtext[1].getText(), jtext[2].getText(), jtext[3].getText(), jtext[4].getText(),
                            jtext[5].getText(), jtext[6].getText())) {
                        JOptionPane.showConfirmDialog(null, new JLabel("EMPLEADO INGRESADO EXITOSAMENTE"), "INGRESO EMPLEADO", JOptionPane.OK_OPTION);
                        limpiar_campos(jtext);
                        listado_todos_empleados = empl.obtener_clientes();
                        limpiar_tablas(jt_listado_empleados);
                        rellenar_tabla_empleados();
                        jtf_codigo_empleado.setEnabled(true);
                        jtf_codigo_empleado.setEditable(true);
                    } else {
                        JOptionPane.showConfirmDialog(null, new JLabel("OCURRIO UN ERROR CON LA BASE DE DATOS, INTENTA DE NUEVO"), "INGRESO EMPLEADO", JOptionPane.OK_OPTION);
                    }
                }
            } else {
                JOptionPane.showConfirmDialog(null, new JLabel("TIENES CAMPOS OBLIGATORIOS VACIOS, LLENALOS"), "ERROR", JOptionPane.OK_OPTION);
            }
        } else {
            JTextField[] jtext = jtfs("EMPLEADO");
            if (JOptionPane.YES_OPTION == confirmar_ingreso_actualizacion("Será actualizado el siguiente empleado ", jtext,
                    new String[]{"CODIGO EMPLEADO: ", "NOMBRE: ", "TELEFONO: ", "DPI: ", "DIRECCION: ", "EMAIL: ", "NIT: "}, "ACTUALIZACION EMPLEADO")) {
                EmpleadoDAO empl = new EmpleadoDAO(base);
                if (empl.actualizar_empleado(jtext[0].getText(), jtext[1].getText(), jtext[2].getText(), jtext[3].getText(), jtext[4].getText(),
                        jtext[5].getText(), jtext[6].getText())) {
                    JOptionPane.showConfirmDialog(null, new JLabel("EMPLEADO ACTUALIZADO EXITOSAMENTE"), "ACTUALIZACION EMPLEADO", JOptionPane.OK_OPTION);
                    limpiar_campos(jtext);
                    listado_todos_empleados = empl.obtener_clientes();
                    limpiar_tablas(jt_listado_empleados);
                    rellenar_tabla_empleados();
                    jtf_codigo_empleado.setEnabled(true);
                    jtf_codigo_empleado.setEditable(true);
                } else {
                    JOptionPane.showConfirmDialog(null, new JLabel("OCURRIO UN ERROR CON LA BASE DE DATOS, INTENTA DE NUEVO"), "ACTUALIZACION EMPLEADO", JOptionPane.OK_OPTION);
                }
            }
        }
    }//GEN-LAST:event_btn_ingresar_empleadoActionPerformed

    private void btn_ingresar_tiendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ingresar_tiendaActionPerformed
        ArrayList<TiendaDTO> tien = listado_todas_tiendas;
        TiendaDTO tie = new TiendaDTO();
        boolean si = false;
        for (TiendaDTO c : tien) {
            if (c.getCodigo_tienda().toUpperCase().equalsIgnoreCase(codigo_tienda)) {
                tie = c;
                si = true;
                break;
            }
        }

        if (btn_ingresar_tienda.getText().equalsIgnoreCase("INGRESAR") && !si) {
            JTextField[] jtext = jtfs("TIENDA");
            if (!jtf_vacios(jtext, 4)) {
                if (JOptionPane.YES_OPTION == confirmar_ingreso_actualizacion("Será ingresada la siguiente tienda ", jtext,
                        new String[]{"CODIGO: ", "NOMBRE: ", "DIRECCION: ", "TELEFONO: ", "TELEFONO 2: ", "EMAIL: ", "HORARIO"}, "INGRESO TIENDA")) {
                    TiendaDAO empl = new TiendaDAO(base);
                    if (empl.ingreso_tienda(jtext[0].getText(), jtext[1].getText(), jtext[2].getText(), jtext[3].getText(), jtext[4].getText(),
                            jtext[5].getText(), jtext[6].getText())) {
                        JOptionPane.showConfirmDialog(null, new JLabel("TIENDA INGRESADA EXITOSAMENTE"), "INGRESO TIENDA", JOptionPane.OK_OPTION);
                        limpiar_campos(jtext);
                        listado_todas_tiendas = empl.obtener_tiendas();
                        limpiar_tablas(jt_listado_tiendas);
                        rellenar_tabla_tiendas();
                        jl_aviso_tienda.setVisible(false);
                    } else {
                        JOptionPane.showConfirmDialog(null, new JLabel("OCURRIO UN ERROR CON LA BASE DE DATOS, INTENTA DE NUEVO"), "INGRESO TIENDA", JOptionPane.OK_OPTION);
                    }
                }
            } else {
                JOptionPane.showConfirmDialog(null, new JLabel("TIENES CAMPOS OBLIGATORIOS VACIOS, LLENALOS"), "ERROR", JOptionPane.OK_OPTION);
            }
        } else {
            JTextField[] jtext = jtfs("TIENDA");
            if (!jtf_vacios(jtext, 4)) {
                if (JOptionPane.YES_OPTION == confirmar_ingreso_actualizacion("Será actualizada la siguiente tienda ", jtext,
                        new String[]{"CODIGO: ", "NOMBRE: ", "DIRECCION: ", "TELEFONO: ", "TELEFONO 2: ", "EMAIL: ", "HORARIO"}, "ACTUALIZACION TIENDA")) {
                    TiendaDAO empl = new TiendaDAO(base);
                    if (empl.actualizar_tienda(jtext[0].getText(), jtext[1].getText(), jtext[2].getText(), jtext[3].getText(), jtext[4].getText(),
                            jtext[5].getText(), jtext[6].getText(), codigo_tienda)) {
                        JOptionPane.showConfirmDialog(null, new JLabel("TIENDA ACTUALIZADA EXITOSAMENTE"), "ACTUALIZACION TIENDA", JOptionPane.OK_OPTION);
                        limpiar_campos(jtext);
                        listado_todas_tiendas = empl.obtener_tiendas();
                        limpiar_tablas(jt_listado_tiendas);
                        rellenar_tabla_tiendas();
                        jl_aviso_tienda.setVisible(false);
                    } else {
                        JOptionPane.showConfirmDialog(null, new JLabel("OCURRIO UN ERROR CON LA BASE DE DATOS, INTENTA DE NUEVO"), "ACTUALIZACION TIENDA", JOptionPane.OK_OPTION);
                    }
                }
            } else {
                JOptionPane.showConfirmDialog(null, new JLabel("TIENES CAMPOS OBLIGATORIOS VACIOS, LLENALOS"), "ERROR", JOptionPane.OK_OPTION);
            }
        }
    }//GEN-LAST:event_btn_ingresar_tiendaActionPerformed

    private void jtf_codigo_tiendaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_codigo_tiendaKeyReleased
        if (btn_ingresar_tienda.getText().equalsIgnoreCase("INGRESAR")) {
            String s = jtf_codigo_tienda.getText();
            boolean existe = false;

            for (TiendaDTO t : listado_todas_tiendas) {
                if (t.getCodigo_tienda().equalsIgnoreCase(s)) {
                    existe = true;
                    break;
                }
            }

            jl_aviso_tienda.setVisible(true);

            if (existe) {
                jl_aviso_tienda.setText("X");
                jl_aviso_tienda.setForeground(Color.red);
                jl_aviso_tienda.setToolTipText("Ya existe este codigo, ingresa uno diferente");
            } else {
                jl_aviso_tienda.setText("√");
                jl_aviso_tienda.setForeground(Color.green);
                jl_aviso_tienda.setToolTipText("");
            }
            if (s.isEmpty()) {
                jl_aviso_tienda.setVisible(false);
            }
        } else {
            jl_aviso_tienda.setVisible(false);
        }
    }//GEN-LAST:event_jtf_codigo_tiendaKeyReleased

    private void btn_editar_tiempoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editar_tiempoActionPerformed
        rellenar_campos_tiempos("TIEMPO", btn_ingresar_tiempo, jt_listado_tiempos);
        jcb_tiendas1.setEnabled(false);
        jcb_tiendas2.setEnabled(false);
        btn_cancelar_tiempo.setVisible(true);
    }//GEN-LAST:event_btn_editar_tiempoActionPerformed

    private void btn_cancelar_tiempoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelar_tiempoActionPerformed
        jcb_tiendas1.setEnabled(true);
        jcb_tiendas2.setEnabled(true);
        btn_ingresar_tiempo.setText("INGRESAR");
        btn_cancelar_tiempo.setVisible(false);
        jtf_dias.setText("");
        cancelado = true;
        jcb_tiendas1.setSelectedItem("SIN SELECCION");
        jcb_tiendas2.setSelectedItem("SIN SELECCION");
    }//GEN-LAST:event_btn_cancelar_tiempoActionPerformed

    private void jtf_diasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtf_diasKeyReleased
        String e = jtf_dias.getText();
        String tm = "";
        char c = evt.getKeyChar();
        if (evt.getKeyCode() != 8) {
            if (!Character.isDigit(c)) {
                if (e.length() > 0) {
                    for (int i = 0; i < (e.length() - 1); i++) {
                        if (Character.isDigit(e.charAt(i))) {
                            tm += e.charAt(i) + "";
                        }
                    }
                    jtf_dias.setText(tm);
                } else {
                    jtf_dias.setText("");
                }
            }
        }
        verificar_tiempo();
    }//GEN-LAST:event_jtf_diasKeyReleased
    boolean cancelado = true;
    private void jcb_tiendas1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcb_tiendas1ItemStateChanged

    }//GEN-LAST:event_jcb_tiendas1ItemStateChanged

    private void jcb_tiendas2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcb_tiendas2ItemStateChanged
        //verificar_tiempo();

    }//GEN-LAST:event_jcb_tiendas2ItemStateChanged

    private void jcb_tiendas1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcb_tiendas1ActionPerformed
        tiempo_existente(0);
    }//GEN-LAST:event_jcb_tiendas1ActionPerformed

    private void jcb_tiendas2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcb_tiendas2ActionPerformed
        tiempo_existente(1);
    }//GEN-LAST:event_jcb_tiendas2ActionPerformed

    private void jcb_tiendas1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcb_tiendas1MouseExited

    }//GEN-LAST:event_jcb_tiendas1MouseExited

    private void jcb_tiendas2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcb_tiendas2MouseExited

    }//GEN-LAST:event_jcb_tiendas2MouseExited

    private void btn_ingresar_tiempoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ingresar_tiempoActionPerformed
        String s = btn_ingresar_tiempo.getText();
        String t1 = jcb_tiendas1.getSelectedItem().toString();
        String t2 = jcb_tiendas2.getSelectedItem().toString();
        boolean ingreso = s.equalsIgnoreCase("INGRESAR");
        String tipo = "";
        String texto = "";
        if (ingreso) {
            texto = "<html><body>Será ingresado el siguiente tiempo entre las tiendas<br>" + t1 + " - " + t2 + " ¿está correcto el dato?</body></html>";
            tipo = "INGRESO TIEMPO";
        } else {
            texto = "<html><body>Será actualizado el siguiente tiempo entre las tiendas<br> " + t1 + " - " + t2 + " ¿está correcto el dato?</body></html>";
            tipo = "ACTUALIZACIÓN TIEMPO";
        }

        JPanel jp = new JPanel();
        jp.setLayout(new GridBagLayout());
        GridBagConstraints gb = new GridBagConstraints();
        gb.gridx = 0;
        gb.gridy = 0;
        gb.gridwidth = 2;
        gb.gridheight = 1;
        GridBagConstraints gb2 = new GridBagConstraints();
        gb2.gridx = 0;
        gb2.gridy = 1;
        gb2.gridwidth = 1;
        gb2.gridheight = 1;
        gb2.fill = GridBagConstraints.HORIZONTAL;
        GridBagConstraints gb3 = new GridBagConstraints();
        gb3.gridx = 1;
        gb3.gridy = 1;
        gb3.gridwidth = 1;
        gb3.gridheight = 1;
        gb3.fill = GridBagConstraints.HORIZONTAL;
        JTextField temporal = new JTextField(jtf_dias.getText(), SwingConstants.CENTER);
        temporal.setEnabled(false);
        temporal.setHorizontalAlignment(SwingConstants.CENTER);
        jp.add(new JLabel(texto, SwingConstants.CENTER), gb);
        jp.add(new JLabel("DÍAS", SwingConstants.CENTER), gb2);
        jp.add(temporal, gb3);
        int elegido = JOptionPane.showConfirmDialog(null, jp, tipo, JOptionPane.YES_NO_OPTION);
        if (elegido == JOptionPane.YES_OPTION) {
            TiendaDAO ag_tiempo = new TiendaDAO(base);
            if (ingreso) {
                if (ag_tiempo.ingresar_tiempo(decodificar(t1), decodificar(t2), Integer.parseInt(jtf_dias.getText()))) {
                    JOptionPane.showMessageDialog(null, new JLabel("TIEMPO INGRESADO EXITOSAMENTE"));
                } else {
                    JOptionPane.showMessageDialog(null, new JLabel("ERROR: ocurrió un error con la base de datos, intenta de nuevo"));
                }
            } else {
                if (ag_tiempo.actualizar_tiempo(obtener_id_tiempo(decodificar(t1), decodificar(t2)), Integer.parseInt(jtf_dias.getText()))) {
                    JOptionPane.showMessageDialog(null, new JLabel("TIEMPO ACTUALIZADO EXITOSAMENTE"));
                } else {
                    JOptionPane.showMessageDialog(null, new JLabel("ERROR: ocurrió un error con la base de datos, intenta de nuevo"));
                }
            }
            btn_cancelar_tiempo.setVisible(false);
            btn_ingresar_tiempo.setEnabled(false);
            btn_ingresar_tiempo.setText("INGRESAR");
            jcb_tiendas1.setSelectedItem("SIN SELECCION");
            jcb_tiendas2.setSelectedItem("SIN SELECCION");
            jcb_tiendas1.setEnabled(true);
            jcb_tiendas2.setEnabled(true);
            jtf_dias.setText("");
            tiempos = ag_tiempo.obtener_tiempos();
            actualizar_tabla_tiempo();
        }
    }//GEN-LAST:event_btn_ingresar_tiempoActionPerformed

    private void btn_cancelar_existenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelar_existenciaActionPerformed
        jcb_producto_existencia.setSelectedItem("SIN SELECCION");
        jcb_tienda_existencia.setSelectedItem("SIN SELECCION");
        jcb_producto_existencia.setEnabled(true);
        jcb_tienda_existencia.setEnabled(true);
        jtf_cantidad_existencia.setText("");
        btn_cancelar_existencia.setVisible(false);
        btn_actualizar.setText("INGRESAR");
    }//GEN-LAST:event_btn_cancelar_existenciaActionPerformed

    private void jcb_producto_existenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcb_producto_existenciaActionPerformed
        existencia_existente(0);
    }//GEN-LAST:event_jcb_producto_existenciaActionPerformed

    private void jcb_tienda_existenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcb_tienda_existenciaActionPerformed
        existencia_existente(1);
    }//GEN-LAST:event_jcb_tienda_existenciaActionPerformed

    private void btn_actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_actualizarActionPerformed
        String c = jcb_producto_existencia.getSelectedItem().toString();
        String t = jcb_tienda_existencia.getSelectedItem().toString();
        String codigo_producto = decodificar(c);
        String codigo_tienda1 = decodificar(t);
        String[] valo = {"PRODUCTO: ", "TIENDA: ", "CANTIDAD: "};
        int cantidad = Integer.parseInt(jtf_cantidad_existencia.getText());
        JTextField[] txts = {new JTextField(c), new JTextField(t), new JTextField(cantidad + "")};
        if (btn_actualizar.getText().equalsIgnoreCase("INGRESAR")) {
            int opcion = confirmar_ingreso_actualizacion("Será ingresada la siguiente existencia ", txts, valo, "INGRESO EXISTENCIA");
            if (opcion == JOptionPane.YES_OPTION) {
                ProductoDAO pao = new ProductoDAO(base);
                String ingre = pao.ingreso_existencia(codigo_producto, codigo_tienda1, cantidad);
                if (ingre.equalsIgnoreCase("INGRESADO")){
                    JOptionPane.showMessageDialog(null, new JLabel("EXISTENCIA INGRESADA CORRECTAMENTE"), "INGRESO EXISTENCIA", JOptionPane.YES_OPTION);
                    jcb_producto_existencia.setSelectedItem("SIN SELECCION");
                    jcb_tienda_existencia.setSelectedItem("SIN SELECCION");
                    jtf_cantidad_existencia.setText("");
                    jcb_producto_existencia.setEnabled(true);
                    jcb_tienda_existencia.setEnabled(true);
                    btn_cancelar_existencia.setVisible(false);
                    btn_actualizar.setText("INGRESAR");
                    listado_todos_productos = pao.obtener_existencias();
                    limpiar_tablas(jt_listado_existencias);
                    jcb_filtrar_existencias.setSelectedItem("TODO");
                    jl_temporal_existencias.setVisible(false);
                    jtf_temporal_existencias.setVisible(false);
                    rellenar_tabla_existencias();
                    
                } else {
                    JOptionPane.showMessageDialog(null, new JLabel("ERROR: problema con la base de datos, "+ingre), "INGRESO EXISTENCIA", JOptionPane.YES_OPTION);
                }
            } else {

            }
        } else {
            int opcion = confirmar_ingreso_actualizacion("Será actualizada la siguiente existencia ", txts, valo, "ACTUALIZACIÓN EXISTENCIA");
            if (opcion == JOptionPane.YES_OPTION) {
                ProductoDAO pa = new ProductoDAO(base);
                ProductoDTO p = obtener_id_existencia(codigo_producto,codigo_tienda1);
                if (pa.actualizacion_existencia(p.getCodigo_existencia(), cantidad)){
                    JOptionPane.showMessageDialog(null, new JLabel("EXISTENCIA ACTUALIZADA CORRECTAMENTE"), "ACTUALIZACION EXISTENCIA", JOptionPane.YES_OPTION);
                    jcb_producto_existencia.setSelectedItem("SIN SELECCION");
                    jcb_tienda_existencia.setSelectedItem("SIN SELECCION");
                    jtf_cantidad_existencia.setText("");
                    jcb_producto_existencia.setEnabled(true);
                    jcb_tienda_existencia.setEnabled(true);
                    btn_cancelar_existencia.setVisible(false);
                    btn_actualizar.setText("INGRESAR");
                    listado_todos_productos = pa.obtener_existencias();
                    limpiar_tablas(jt_listado_existencias);
                    jcb_filtrar_existencias.setSelectedItem("TODO");
                    jl_temporal_existencias.setVisible(false);
                    jtf_temporal_existencias.setVisible(false);
                    rellenar_tabla_existencias();
                } else {
                    JOptionPane.showMessageDialog(null, new JLabel("ERROR: problema con la base de datos"), "ACTUALIZACION EXISTENCIA", JOptionPane.YES_OPTION);
                }
            } else {

            }
        }
    }//GEN-LAST:event_btn_actualizarActionPerformed
    String palabra = "";

    public void actualizar_tabla_tiempo() {
        String s = jcb_filtrar_tiempos.getSelectedItem().toString();
        limpiar_tablas(jt_listado_tiempos);
        if (s.equalsIgnoreCase("TIENDA ESPECIFICA")) {
            rellenar_tabla_tiempos();
        } else {
            if (s.equalsIgnoreCase("TIENDA ACTUAL")) {
                rellenar_tabla_tiempos(getCodigo_tienda_actual());
            } else {
                rellenar_tabla_tiempos();
            }
        }
    }

    public ProductoDTO obtener_id_existencia(String codigo_producto, String codigo_tienda) {
        ProductoDTO pro = new ProductoDTO();
        pro.setCodigo_existencia(-1);
        for (ProductoDTO p : listado_todos_productos) {
            if (p.getCodigo_producto().equalsIgnoreCase(codigo_producto) && p.getCodigo_tienda().equalsIgnoreCase(codigo_tienda)) {
                pro = p;
                break;
            }
        }
        return pro;
    }

    public int obtener_id_tiempo(String codigo_tienda1, String codigo_tienda2) {
        int tie = -1;
        for (String[] t : tiempos) {
            if ((t[0].equalsIgnoreCase(codigo_tienda1) || t[1].equalsIgnoreCase(codigo_tienda1))
                    && (t[1].equalsIgnoreCase(codigo_tienda2) || t[0].equalsIgnoreCase(codigo_tienda2))) {
                tie = Integer.parseInt(t[3]);
                break;
            }
        }
        return tie;
    }

    public void rellenar_tabla_tiempos() {
        for (String[] s : tiempos) {
            rellenar_tiempos(s[3], s[0] + "|" + nombre_tienda(s[0]), s[1] + "|" + nombre_tienda(s[1]), s[2]);
        }
    }

    public void rellenar_tabla_tiempos(String condicion) {
        limpiar_tablas(jt_listado_tiempos);
        for (String[] s : tiempos) {
            String p1 = s[0] + "|" + nombre_tienda(s[0]);
            String p2 = s[1] + "|" + nombre_tienda(s[1]);
            if (p1.toUpperCase().contains(condicion.toUpperCase()) || p2.toUpperCase().contains(condicion.toUpperCase())) {
                rellenar_tiempos(s[3], p1, p2, s[2]);
            }
        }
    }

    public void rellenar_tiempos(String id, String codigo_tienda1, String codigo_tienda2, String dias) {
        Object[] fila = new Object[4];
        DefaultTableModel model = (DefaultTableModel) jt_listado_tiempos.getModel();
        fila[0] = id;
        fila[1] = codigo_tienda1;
        fila[2] = codigo_tienda2;
        fila[3] = dias;
        model.addRow(fila);
    }

    public void limpiar_tablas(JTable tabla) {
        DefaultTableModel tb = (DefaultTableModel) tabla.getModel();
        int a = tabla.getRowCount() - 1;
        for (int i = a; i >= 0; i--) {
            tb.removeRow(tb.getRowCount() - 1);
        }
    }

    public void rellenar_tabla_existencias() {
        for (ProductoDTO producto : listado_todos_productos) {
            rellenar_existencias(producto);
        }
    }

    public void rellenar_tabla_existencias(String ve, String es) {
        for (ProductoDTO producto : listado_todos_productos) {
            if (ve.equalsIgnoreCase("Producto:")) {
                if (producto.getCodigo_producto().toUpperCase().contains(es.toUpperCase())
                        || producto.getNombre().toUpperCase().contains(es.toUpperCase())) {
                    rellenar_existencias(producto);
                }
            } else {
                if (producto.getCodigo_tienda().toUpperCase().contains(es.toUpperCase())
                        || nombre_tienda(producto.getCodigo_tienda()).toUpperCase().contains(es.toUpperCase())) {
                    rellenar_existencias(producto);
                }
            }
        }
    }

    public void rellenar_tabla_empleados(String ve, String es) {
        for (EmpleadoDTO e : listado_todos_empleados) {
            if (ve.equalsIgnoreCase("Codigo:")) {
                if (e.getCodigo_empleado().toUpperCase().contains(es.toUpperCase())) {
                    rellenar_empleados(e);
                }
            } else {
                if (e.getNombre().toUpperCase().contains(es.toUpperCase())) {
                    rellenar_empleados(e);
                }
            }
        }
    }

    public void rellenar_tabla_empleados() {
        for (EmpleadoDTO e : listado_todos_empleados) {
            rellenar_empleados(e);
        }
    }

    public void rellenar_empleados(EmpleadoDTO e) {
        Object[] fila = new Object[7];
        DefaultTableModel model = (DefaultTableModel) jt_listado_empleados.getModel();
        fila[0] = e.getCodigo_empleado();
        fila[1] = e.getNombre();
        fila[2] = e.getTelefono();
        fila[3] = e.getDpi();
        fila[4] = e.getDireccion();
        fila[5] = e.getEmail();
        fila[6] = e.getNit();
        model.addRow(fila);
    }

    public void rellenar_existencias(ProductoDTO producto) {
        Object[] fila = new Object[6];
        DefaultTableModel model = (DefaultTableModel) jt_listado_existencias.getModel();
        fila[0] = producto.getCodigo_producto();
        fila[1] = producto.getNombre();
        fila[2] = producto.getPrecio();
        fila[3] = producto.getCantidad();
        fila[4] = producto.getCodigo_tienda();
        String nombre_tienda = "";
        for (int i = 0; i < listado_todas_tiendas.size(); i++) {
            if (listado_todas_tiendas.get(i).getCodigo_tienda().equalsIgnoreCase(producto.getCodigo_tienda())) {
                nombre_tienda = listado_todas_tiendas.get(i).getNombre();
            }
        }
        fila[5] = nombre_tienda;
        model.addRow(fila);
    }

    public void rellenar_tabla_existencias_cproducto(String codigo_producto) {
        for (ProductoDTO producto : listado_todos_productos) {
            if (producto.getCodigo_producto().contains(codigo_producto)) {
                rellenar_existencias(producto);
            }
        }
    }

    public void rellenar_tabla_existencias_nproducto(String nombre_producto) {
        for (ProductoDTO producto : listado_todos_productos) {
            if (producto.getNombre().contains(nombre_producto)) {
                rellenar_existencias(producto);
            }
        }
    }

    public void rellenar_tabla_existencias_ctienda(String codigo_tienda) {
        for (ProductoDTO producto : listado_todos_productos) {
            if (producto.getCodigo_tienda().contains(codigo_tienda)) {
                rellenar_existencias(producto);
            }
        }
    }

    public void rellenar_tabla_productos(ArrayList<ProductoDTO> p) {
        for (ProductoDTO producto : p) {
            rellenar_productos(producto);
        }
    }

    public void rellenar_tabla_productos(ArrayList<ProductoDTO> p, String jtf) {
        for (ProductoDTO producto : p) {
            if (jl_temporal_productos.getText().equalsIgnoreCase("Codigo:")) {
                if (producto.getCodigo_producto().toUpperCase().contains(jtf.toUpperCase())) {
                    rellenar_productos(producto);
                }
            } else {
                if (producto.getNombre().toUpperCase().contains(jtf.toUpperCase())) {
                    rellenar_productos(producto);
                }
            }
        }
    }

    public void rellenar_tabla_clientes() {
        for (ClienteDTO cliente : listado_todos_clientes) {
            rellenar_clientes(cliente);
        }
    }

    public void rellenar_tabla_tiendas() {
        for (TiendaDTO tienda : listado_todas_tiendas) {
            rellenar_tiendas(tienda);
        }
    }

    public void rellenar_tiendas(TiendaDTO t) {
        Object[] fila = new Object[7];
        DefaultTableModel model = (DefaultTableModel) jt_listado_tiendas.getModel();
        fila[0] = t.getCodigo_tienda();
        fila[1] = t.getNombre();
        fila[2] = t.getDireccion();
        fila[3] = t.getTelefono();
        fila[4] = t.getTelefono2();
        fila[5] = t.getEmail();
        fila[6] = t.getHorario();
        model.addRow(fila);
    }

    public void rellenar_tabla_clientes(String fi, String n) {
        for (ClienteDTO cliente : listado_todos_clientes) {
            if (fi.equalsIgnoreCase("Nit:")) {
                if (cliente.getNit().toUpperCase().contains(n.toUpperCase())) {
                    rellenar_clientes(cliente);
                }
            } else {
                if (cliente.getNombre().toUpperCase().contains(n.toUpperCase())) {
                    rellenar_clientes(cliente);
                }
            }
        }
    }

    public void rellenar_tabla_tiendas(String fi, String n) {
        for (TiendaDTO t : listado_todas_tiendas) {
            if (fi.equalsIgnoreCase("Codigo:")) {
                if (t.getCodigo_tienda().toUpperCase().contains(n.toUpperCase())) {
                    rellenar_tiendas(t);
                }
            } else {
                if (t.getNombre().toUpperCase().contains(n.toUpperCase())) {
                    rellenar_tiendas(t);
                }
            }
        }
    }

    public void rellenar_clientes(ClienteDTO c) {
        Object[] fila = new Object[7];
        DefaultTableModel model = (DefaultTableModel) jt_listado_clientes.getModel();
        fila[0] = c.getNit();
        fila[1] = c.getNombre();
        fila[2] = c.getTelefono();
        fila[3] = c.getCredito();
        fila[4] = c.getDpi();
        fila[5] = c.getDireccion();
        fila[6] = c.getEmail();
        model.addRow(fila);
    }

    public void rellenar_productos(ProductoDTO producto) {
        Object[] fila = new Object[6];
        DefaultTableModel model = (DefaultTableModel) jt_listado_productos.getModel();
        fila[0] = producto.getCodigo_producto();
        fila[1] = producto.getNombre();
        fila[2] = producto.getFabricante();
        fila[3] = producto.getPrecio();
        fila[4] = producto.getDescripcion();
        fila[5] = producto.getGarantia();
        model.addRow(fila);
    }

    public ArrayList<ProductoDTO> listado_productos() {
        ArrayList<ProductoDTO> retorno = new ArrayList<>();
        for (int i = 0; i < listado_todos_productos.size(); i++) {
            if (i == 0) {
                retorno.add(listado_todos_productos.get(i));
            } else {
                boolean repetido = false;
                for (int o = 0; o < retorno.size(); o++) {
                    if (retorno.get(o).getCodigo_producto().equalsIgnoreCase(listado_todos_productos.get(i).getCodigo_producto())) {
                        repetido = true;
                    }
                }
                if (!repetido) {
                    retorno.add(listado_todos_productos.get(i));
                }
            }
        }
        return retorno;
    }

    public ArrayList<ProductoDTO> listado_tiendas() {
        ArrayList<ProductoDTO> r = new ArrayList<>();
        ArrayList<ProductoDTO> l = listado_todos_productos;
        for (int i = 0; i < l.size(); i++) {
            if (i == 0) {
                r.add(l.get(i));
            } else {
                boolean repetido = false;
                for (int o = 0; o < r.size(); o++) {
                    if (r.get(o).getCodigo_tienda().equalsIgnoreCase(l.get(i).getCodigo_tienda())) {
                        repetido = true;
                    }
                }
                if (!repetido) {
                    r.add(l.get(i));
                }
            }
        }
        return r;
    }

    public String nombre_tienda(String codigo_tienda) {
        String nombre = "";
        for (TiendaDTO tienda : listado_todas_tiendas) {
            if (tienda.getCodigo_tienda().equalsIgnoreCase(codigo_tienda)) {
                nombre = tienda.getNombre();
            }
        }
        return nombre;
    }

    public String decodificar(String codigo) {
        int posicion = codigo.indexOf("|");
        String r = "";
        for (int i = 0; i < posicion; i++) {
            r += codigo.charAt(i) + "";
        }
        return r;
    }

    public void rellenar_jcb_principales() {
        ArrayList<ProductoDTO> l = listado_productos();
        ArrayList<TiendaDTO> t = listado_todas_tiendas;
        for (int i = 0; i < l.size(); i++) {
            jcb_producto_existencia.addItem(l.get(i).getCodigo_producto() + "|" + l.get(i).getNombre());
        }
        for (int i = 0; i < t.size(); i++) {
            jcb_tienda_existencia.addItem(t.get(i).getCodigo_tienda() + "|" + t.get(i).getNombre());
        }
    }

    public void verificar_existencia() {
        if (!jcb_producto_existencia.getSelectedItem().toString().equalsIgnoreCase("SIN SELECCION")
                && !jcb_tienda_existencia.getSelectedItem().toString().equalsIgnoreCase("SIN SELECCION")
                && jtf_cantidad_existencia.getText().length() > 0) {
            btn_actualizar.setEnabled(true);
        } else {
            btn_actualizar.setEnabled(false);
        }
    }

    public void verificar_producto() {
        if (!jl_codigo_existente.getText().equalsIgnoreCase("X") && jtf_nombre_producto.getText().length() > 0
                && jtf_fabricante_producto.getText().length() > 0 && jtf_precio_producto.getText().length() > 0) {
            btn_ingresar_producto.setEnabled(true);
        } else {
            btn_ingresar_producto.setEnabled(false);
        }
        String[] jtfs = {jtf_codigo_producto.getText(),
            jtf_nombre_producto.getText(), jtf_fabricante_producto.getText(), jtf_precio_producto.getText(),
            jta_descripcion_producto.getText(), jtf_garantia_producto.getText()};
        if (!jtf_vacios(jtfs) && btn_ingresar_producto.getText().equalsIgnoreCase("INGRESAR")) {
            btn_limpiar_producto.setText("<html><body>LIMPIAR<br>CAMPOS</body></html>");
            btn_limpiar_producto.setVisible(true);
        } else {
            btn_limpiar_producto.setVisible(false);
        }
    }

    /**
     * Metodo para saber si todos los JTextField de un formulario están vacios
     *
     * @param jtf String[] de los JTextField de un formulario que se desean
     * verificar si están vacios
     * @return devuelve false si todos los JTextField tienen texto
     */
    public boolean jtf_vacios(String[] jtf) {
        boolean vacio = true;
        for (int i = 0; i < jtf.length; i++) {
            if (jtf[i].length() != 0) {
                vacio = false;
                break;
            }
        }
        return vacio;
    }

    /**
     * Metdodo para saber si los JTextField especificos están vacios de un
     * formulario
     *
     * @param jtf JTextField[] de los que se revisara quienes están vacios
     * @param limite int para saber si los especificos están vacios
     * @return true si todos los JTextField especificos están vacios
     */
    public boolean jtf_vacios(JTextField[] jtf, int limite) {
        boolean vacio = true;
        for (int i = 0; i < limite; i++) {
            if (jtf[i].getText().length() != 0) {
                vacio = false;
                break;
            }
        }
        return vacio;
    }

    /**
     * Metodo para saber si los JTextField requeridos están llenos de un
     * formulario
     *
     * @param jtf JTextField[] que incluye todos los campos de un formulario
     * @param limite int del numero de JTextField requeridos
     * @return true si todos los requeridos están llenos
     */
    public boolean jtf_llenos(JTextField[] jtf, int limite) {
        boolean vacio = true;
        for (int i = 0; i < limite; i++) {
            if (jtf[i].getText().length() == 0) {
                vacio = false;
                break;
            }
        }
        return vacio;
    }

    /**
     * Metodo que extrae los datos de una fila seleccionada de una tabla
     *
     * @param jt tabla de la que se extraen los datos
     * @return array de los datos de una fila seleccionada
     */
    public String[] extraer_datos(JTable jt) {
        int s = jt.getSelectedRow();
        String[] datos = new String[jt.getColumnCount()];
        for (int i = 0; i < jt.getColumnCount(); i++) {
            if (jt.getValueAt(s, i) != null) {
                datos[i] = jt.getValueAt(s, i) + "";
            } else {
                datos[i] = "";
            }
        }
        return datos;
    }

    /**
     * Metodo que rellena todo lo que se tiene que ver al inicio
     */
    public void rellenar_inicio() {
        rellenar_tabla_clientes();
        rellenar_tabla_existencias();
        rellenar_tabla_tiendas();
        rellenar_jcb_principales();
        verificar_datos_cliente();
        verificar_datos("TIENDA", btn_ingresar_tienda, 4);
        verificar_datos("EMPLEADO", btn_ingresar_empleado, 6);
        rellenar_tabla_empleados();
        ArrayList<ProductoDTO> pr = listado_productos();
        rellenar_tabla_productos(pr);
        rellenar_jcb_tiendas(jcb_tiendas1);
        rellenar_jcb_tiendas(jcb_tiendas2);
    }

    public void rellenar_jcb_tiendas(JComboBox jcb) {
        for (TiendaDTO t : listado_todas_tiendas) {
            jcb.addItem(t.getCodigo_tienda() + "|" + t.getNombre());
        }
    }

    /**
     * Metodo para insertar un registro de una tabla en el formulario que se
     * desee
     *
     * @param jtf String que indica en que panel estamos puede ser: -PRODUCTO
     * -EMPLEADO -TIENDA -CLIENTE -EXISTENCIA -TIEMPO
     * @param btn JButton que manda los datos del formulario
     * @param jt JTable de donde se sacara el registro
     */
    public void rellenar_campos(String jtf, JButton btn, JTable jt) {
        boolean rellenar = false;
        JTextField[] t = jtfs(jtf);
        if (!btn.getText().equalsIgnoreCase("ACTUALIZAR")) {
            if (jtf_vacios(t, t.length)) {
                rellenar = true;
            } else {
                int opcion = JOptionPane.showConfirmDialog(null, new JLabel("Tienes un registro en el tintero, ¿seguir con el registro actual?"), "INGRESO DE " + jtf + " INTERRUMPIDO", JOptionPane.YES_NO_OPTION);
                rellenar = opcion == 1;
            }
        } else {
            int opcion = JOptionPane.showConfirmDialog(null, new JLabel("Tienes un registro por actualizar, ¿seguir con el registro actual?"), "ACTUALIZACION DE DATOS DE " + jtf + " INTERRUMPIDA", JOptionPane.YES_NO_OPTION);
            rellenar = opcion == 1;
        }
        if (rellenar) {
            String[] datos = extraer_datos(jt);
            for (int i = 0; i < datos.length; i++) {
                t[i].setText(datos[i]);
            }
            btn.setText("ACTUALIZAR");
            t[0].setEditable(false);
        }
    }

    /**
     * Metodo que rellena los campos del apartado de tiempos
     *
     * @param jtf String que especifica que tipo datos se están mandando
     * @param btn JButton para ingresar o actualizar el apartado de tiempo
     * @param jt JTable de donde se extran los datos necesarios
     */
    public void rellenar_campos_tiempos(String jtf, JButton btn, JTable jt) {
        boolean rellenar = false;
        if (!btn.getText().equalsIgnoreCase("ACTUALIZAR")) {
            if (jcb_tiendas1.getSelectedItem().toString().equalsIgnoreCase("SIN SELECCION") && jcb_tiendas2.getSelectedItem().toString().equalsIgnoreCase("SIN SELECCION") && jtf_dias.getText().isEmpty()) {
                rellenar = true;
            } else {
                int opcion = JOptionPane.showConfirmDialog(null, new JLabel("Tienes un registro en el tintero, ¿seguir con el registro actual?"), "INGRESO DE " + jtf + " INTERRUMPIDO", JOptionPane.YES_NO_OPTION);
                rellenar = opcion == 1;
            }
        } else {
            int opcion = JOptionPane.showConfirmDialog(null, new JLabel("Tienes un registro por actualizar, ¿seguir con el registro actual?"), "ACTUALIZACION DE DATOS DE " + jtf + " INTERRUMPIDA", JOptionPane.YES_NO_OPTION);
            rellenar = opcion == 1;
        }
        if (rellenar) {
            String[] datos = extraer_datos(jt);
            tiempo = datos[0];
            jcb_tiendas1.setSelectedItem(datos[1]);
            jcb_tiendas2.setSelectedItem(datos[2]);
            jtf_dias.setText(datos[3]);
            btn.setText("ACTUALIZAR");
        }
    }

    /**
     * Metodo que habilita/deshabilita el boton editar, según si se ha
     * seleccionado una fila de una tabla o no
     *
     * @param jt tabla a la que se le dio click y se necesita saber la fila
     * seleccionada
     * @param btn boton a activar al seleccionar una fila de una tabla
     */
    public void habilitar_boton_editar(JTable jt, JButton btn) {
        int filaseleccionada = jt.getSelectedRow();
        if (filaseleccionada >= 0) {
            btn.setEnabled(true);
        } else {
            btn.setEnabled(false);
        }
    }

    /**
     * Metodo que deja limpio todos los campos de producto
     */
    public void limpiar_campos_producto() {
        jtf_codigo_producto.setText("");
        jtf_nombre_producto.setText("");
        jl_codigo_existente.setVisible(false);
        jtf_fabricante_producto.setText("");
        jtf_precio_producto.setText("");
        jta_descripcion_producto.setText("");
        jtf_garantia_producto.setText("");
        btn_limpiar_producto.setVisible(false);
        btn_ingresar_producto.setEnabled(false);
    }

    /**
     * Metodo para limpiar JTextFields que correspondan a cierto formulario
     *
     * @param jtf JTextField[] correspondiente a los campos que se desean
     * limpiar
     */
    public void limpiar_campos(JTextField[] jtf) {
        for (int i = 0; i < jtf.length; i++) {
            jtf[i].setText("");
        }
    }

    /**
     * Metodo que devuelve todos los JTextField de un panel determinado,
     * mediante enviarle las primeras letras del panel
     *
     * @param e String primeras tres letras del panel en que se esté -PRODUCTO
     * -TIENDA -CLIENTE -EMPLEADO -EXISTENCIA -TIEMPO
     * @return JTextField[] con todos los campos de determinado panel
     */
    public JTextField[] jtfs(String e) {
        JTextField[] jtfs1 = {new JTextField("Prueba")};
        if (e.equalsIgnoreCase("PRODUCTO")) {
            JTextField[] jtfs = {jtf_codigo_producto,
                jtf_nombre_producto, jtf_fabricante_producto, jtf_precio_producto,
                jtf_garantia_producto};
            jtfs1 = jtfs;
        } else if (e.equalsIgnoreCase("CLIENTE")) {
            JTextField[] jtfs = {jtf_nit_cliente, jtf_nombre_cliente, jtf_telefono_cliente,
                jtf_credito_cliente, jtf_dpi_cliente, jtf_direccion_cliente, jtf_email_cliente};
            jtfs1 = jtfs;
        } else if (e.equalsIgnoreCase("TIENDA")) {
            JTextField[] jtfs = {jtf_codigo_tienda,
                jtf_nombre_tienda,
                jtf_direccion_tienda,
                jtf_telefono_tienda,
                jtf_telefono2_tienda,
                jtf_email_tienda,
                jtf_horario_tienda};
            jtfs1 = jtfs;
        } else if (e.equalsIgnoreCase("EMPLEADO")) {
            JTextField[] jtfs = {jtf_codigo_empleado,
                jtf_nombre_empleado,
                jtf_telefono_empleado,
                jtf_dpi_empleado,
                jtf_direccion_empleado,
                jtf_email_empleado,
                jtf_nit_empleado};
            jtfs1 = jtfs;
        }

        return jtfs1;
    }

    /**
     * Metodo que agrega los KeyListeners a los campos, para verificar cuando se
     * ha cumplido con los datos requeridos para así habilitar el boton de
     * ingreso
     */
    public void verificar_datos_cliente() {
        JTextField[] jtfs = jtfs("CLIENTE");
        KeyListener key = new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
                if (jtf_llenos(jtfs, 3)) {
                    btn_ingresar_cliente.setEnabled(true);
                } else {
                    btn_ingresar_cliente.setEnabled(false);
                }
            }
        };
        for (int i = 0; i < jtfs.length; i++) {
            jtfs[i].addKeyListener(key);
        }
    }

    /**
     *
     * @param jtfs1
     * @param ingreso
     * @param requeridos
     */
    public void verificar_datos(String jtfs1, JButton ingreso, int requeridos) {
        JTextField[] jtfs = jtfs(jtfs1);
        KeyListener key = new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {
            }

            @Override
            public void keyPressed(KeyEvent ke) {
            }

            @Override
            public void keyReleased(KeyEvent ke) {
                if (jtf_llenos(jtfs, requeridos)) {
                    ingreso.setEnabled(true);
                } else {
                    ingreso.setEnabled(false);
                }
            }
        };
        for (int i = 0; i < jtfs.length; i++) {
            jtfs[i].addKeyListener(key);
        }
    }

    public String getCodigo_tienda_actual() {
        return codigo_tienda_actual;
    }

    public void setCodigo_tienda_actual(String codigo_tienda_actual) {
        this.codigo_tienda_actual = codigo_tienda_actual;
    }

    /**
     * Metodo que devuelve la respuesta del usuario de si están correctos los
     * datos que desea ingresar o actualizar
     *
     * @param cambio String tipo de cambio que se hará
     * @param jtext JTextField[] de los campos que el usuario a modificado
     * @param val String[] de los valores que el usuario a modificado
     * @param tipo String que especifica que tipo de accion se está realizando,
     * si ingreso o actualizacion
     * @return int de la respuesta del usuario
     */
    public int confirmar_ingreso_actualizacion(String cambio, JTextField[] jtext, String[] val, String tipo) {
        JPanel jp = new JPanel();
        String[] valores = val;
        int cantidad = jtext.length + 1;
        jp.setLayout(new GridLayout(cantidad, cantidad));
        jp.add(new JLabel(cambio));
        jp.add(new JLabel("¿Están correctos los datos?", SwingConstants.CENTER));
        for (int i = 0; i < valores.length; i++) {
            jp.add(new JLabel(valores[i], SwingConstants.CENTER));
            JTextField tm = new JTextField();
            String texto = "---------";
            if (jtext[i].getText().isEmpty()) {
                tm.setText(texto);
                jp.add(tm);
            } else {
                tm.setText(jtext[i].getText());
                jp.add(tm);
            }
            tm.setEnabled(false);
            tm.setHorizontalAlignment(SwingConstants.CENTER);
        }
        return JOptionPane.showConfirmDialog(null, jp, "CONFIRMAR " + tipo, JOptionPane.YES_NO_OPTION);
    }

    /**
     * Metodo que verifica que estén listos los datos a ingresar o cambiar del
     * apartado del tiempo
     */
    public void verificar_tiempo() {
        if (!jcb_tiendas1.getSelectedItem().toString().equalsIgnoreCase("SIN SELECCION") && !jcb_tiendas2.getSelectedItem().toString().equalsIgnoreCase("SIN SELECCION") && !jtf_dias.getText().isEmpty()) {
            btn_ingresar_tiempo.setEnabled(true);
        } else {
            btn_ingresar_tiempo.setEnabled(false);
        }
    }

    /**
     * Metodo que verifica si el tiempo que se está ingresando existe
     *
     * @return true si el tiempo existe
     */
    public boolean verificar_tiempo_existente() {
        String tienda1 = decodificar(jcb_tiendas1.getSelectedItem().toString());
        String tienda2 = decodificar(jcb_tiendas2.getSelectedItem().toString());
        boolean existe = false;
        for (String[] t : tiempos) {
            if ((t[0].equalsIgnoreCase(tienda1) || t[1].equalsIgnoreCase(tienda1)) && (t[1].equalsIgnoreCase(tienda2) || t[0].equalsIgnoreCase(tienda2))) {
                existe = true;
                break;
            }
        }
        return existe;
    }

    /**
     * Metodo que devuelve los días de una tienda en especifica
     *
     * @return int dias
     */
    public int dias() {
        String tienda1 = decodificar(jcb_tiendas1.getSelectedItem().toString());
        String tienda2 = decodificar(jcb_tiendas2.getSelectedItem().toString());
        int dia = -1;
        for (String[] t : tiempos) {
            if ((t[0].equalsIgnoreCase(tienda1) || t[1].equalsIgnoreCase(tienda1)) && (t[1].equalsIgnoreCase(tienda2) || t[0].equalsIgnoreCase(tienda2))) {
                dia = Integer.parseInt(t[2]);
                break;
            }
        }
        return dia;
    }

    /**
     * Metodo que manda los datos a la base de datos
     *
     * @param op int que determina que codigo de tienda fue enviado
     */
    public void tiempo_existente(int op) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                if (!jcb_tiendas1.getSelectedItem().toString().equalsIgnoreCase(jcb_tiendas2.getSelectedItem().toString())) {
                    if (verificar_tiempo_existente() && btn_ingresar_tiempo.getText().equalsIgnoreCase("INGRESAR") && cancelado) {
                        int opcion = JOptionPane.showConfirmDialog(null, new JLabel("Ya existe un registro con los mismos datos de tienda 1 y tienda 2, ¿actualizar ese registro?"), "ACTUALIZAR TIEMPO", JOptionPane.YES_NO_OPTION);
                        if (opcion == JOptionPane.YES_OPTION) {
                            cancelado = false;
                            btn_ingresar_tiempo.setText("ACTUALIZAR");
                            btn_cancelar_tiempo.setVisible(true);
                            jcb_tiendas1.setEnabled(false);
                            jcb_tiendas2.setEnabled(false);
                            jtf_dias.setText(dias() + "");
                        } else {
                            jcb_tiendas1.setSelectedItem("SIN SELECCION");
                            jcb_tiendas2.setSelectedItem("SIN SELECCION");
                            btn_ingresar_tiempo.setText("INGRESAR");
                            btn_cancelar_tiempo.setVisible(false);
                            jcb_tiendas1.setEnabled(true);
                            jcb_tiendas2.setEnabled(true);
                            JOptionPane.showMessageDialog(null, new JLabel("Nota: para ingresar el tiempo, este deben contener datos que aun no existen"));
                            cancelado = true;
                        }
                    }
                } else {
                    if (!jcb_tiendas1.getSelectedItem().toString().equalsIgnoreCase("SIN SELECCION")) {
                        if (op == 0) {
                            jcb_tiendas1.setSelectedItem("SIN SELECCION");
                        } else {
                            jcb_tiendas2.setSelectedItem("SIN SELECCION");
                        }
                        JOptionPane.showMessageDialog(null, new JLabel("No puedes eligir las mismas tiendas"), "ERROR", JOptionPane.ERROR_MESSAGE);
                    }

                }
            }
        });
    }

    public void existencia_existente(int op) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                String t2 = jcb_producto_existencia.getSelectedItem().toString();
                String c2 = jcb_tienda_existencia.getSelectedItem().toString();
                String t = decodificar(t2);
                String c = decodificar(c2);
                ProductoDTO p = obtener_id_existencia(t, c);
                if (p.getCodigo_existencia() != -1 && btn_actualizar.getText().equalsIgnoreCase("INGRESAR")) {
                    int opcion = JOptionPane.showConfirmDialog(null, new JLabel("Ya existe un registro con los mismos datos, ¿actualizar ese registro?"), "ACTUALIZAR TIEMPO", JOptionPane.YES_NO_OPTION);
                    if (opcion == JOptionPane.YES_OPTION) {
                        btn_actualizar.setText("ACTUALIZAR");
                        btn_cancelar_existencia.setVisible(true);
                        jcb_producto_existencia.setEnabled(false);
                        jcb_tienda_existencia.setEnabled(false);
                        jtf_cantidad_existencia.setText(p.getCantidad() + "");
                    } else {
                        jcb_producto_existencia.setSelectedItem("SIN SELECCION");
                        jcb_tienda_existencia.setSelectedItem("SIN SELECCION");
                        btn_actualizar.setText("INGRESAR");
                        btn_cancelar_existencia.setVisible(false);
                        jcb_producto_existencia.setEnabled(true);
                        jcb_tienda_existencia.setEnabled(true);
                        JOptionPane.showMessageDialog(null, new JLabel("Nota: para ingresar la existencia, este deben contener datos que aun no existen"));
                    }
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_actualizar;
    private javax.swing.JButton btn_cancelar_cliente;
    private javax.swing.JButton btn_cancelar_empleado;
    private javax.swing.JButton btn_cancelar_existencia;
    private javax.swing.JButton btn_cancelar_producto;
    private javax.swing.JButton btn_cancelar_tiempo;
    private javax.swing.JButton btn_cancelar_tienda;
    private javax.swing.JButton btn_editar_cliente;
    private javax.swing.JButton btn_editar_empleado;
    private javax.swing.JButton btn_editar_tiempo;
    private javax.swing.JButton btn_editar_tienda;
    private javax.swing.JButton btn_ingresar_cliente;
    private javax.swing.JButton btn_ingresar_empleado;
    private javax.swing.JButton btn_ingresar_producto;
    private javax.swing.JButton btn_ingresar_tiempo;
    private javax.swing.JButton btn_ingresar_tienda;
    private javax.swing.JButton btn_limpiar_producto;
    private javax.swing.JButton btn_modificar;
    private javax.swing.JButton btn_modificar_producto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JComboBox<String> jcb_filtrar_clientes;
    private javax.swing.JComboBox<String> jcb_filtrar_empleados;
    private javax.swing.JComboBox<String> jcb_filtrar_existencias;
    private javax.swing.JComboBox<String> jcb_filtrar_productos;
    private javax.swing.JComboBox<String> jcb_filtrar_tiempos;
    private javax.swing.JComboBox<String> jcb_filtrar_tiendas;
    private javax.swing.JComboBox<String> jcb_producto_existencia;
    private javax.swing.JComboBox<String> jcb_temporal_existencias;
    private javax.swing.JComboBox<String> jcb_tienda_existencia;
    private javax.swing.JComboBox<String> jcb_tiendas1;
    private javax.swing.JComboBox<String> jcb_tiendas2;
    private javax.swing.JLabel jl_aviso_tienda;
    private javax.swing.JLabel jl_codigo_existente;
    private javax.swing.JLabel jl_temporal;
    private javax.swing.JLabel jl_temporal_empleados;
    private javax.swing.JLabel jl_temporal_existencias;
    private javax.swing.JLabel jl_temporal_productos;
    private javax.swing.JLabel jl_temporal_tiempos;
    private javax.swing.JLabel jl_temporal_tiendas;
    private javax.swing.JTable jt_listado_clientes;
    private javax.swing.JTable jt_listado_empleados;
    private javax.swing.JTable jt_listado_existencias;
    private javax.swing.JTable jt_listado_productos;
    private javax.swing.JTable jt_listado_tiempos;
    private javax.swing.JTable jt_listado_tiendas;
    private javax.swing.JTextArea jta_descripcion_producto;
    private javax.swing.JTextField jtf_cantidad_existencia;
    private javax.swing.JTextField jtf_codigo_empleado;
    private javax.swing.JTextField jtf_codigo_producto;
    private javax.swing.JTextField jtf_codigo_tienda;
    private javax.swing.JTextField jtf_credito_cliente;
    private javax.swing.JTextField jtf_dias;
    private javax.swing.JTextField jtf_direccion_cliente;
    private javax.swing.JTextField jtf_direccion_empleado;
    private javax.swing.JTextField jtf_direccion_tienda;
    private javax.swing.JTextField jtf_dpi_cliente;
    private javax.swing.JTextField jtf_dpi_empleado;
    private javax.swing.JTextField jtf_email_cliente;
    private javax.swing.JTextField jtf_email_empleado;
    private javax.swing.JTextField jtf_email_tienda;
    private javax.swing.JTextField jtf_fabricante_producto;
    private javax.swing.JTextField jtf_filtrar_temporal;
    private javax.swing.JTextField jtf_garantia_producto;
    private javax.swing.JTextField jtf_horario_tienda;
    private javax.swing.JTextField jtf_nit_cliente;
    private javax.swing.JTextField jtf_nit_empleado;
    private javax.swing.JTextField jtf_nombre_cliente;
    private javax.swing.JTextField jtf_nombre_empleado;
    private javax.swing.JTextField jtf_nombre_producto;
    private javax.swing.JTextField jtf_nombre_tienda;
    private javax.swing.JTextField jtf_precio_producto;
    private javax.swing.JTextField jtf_telefono2_tienda;
    private javax.swing.JTextField jtf_telefono_cliente;
    private javax.swing.JTextField jtf_telefono_empleado;
    private javax.swing.JTextField jtf_telefono_tienda;
    private javax.swing.JTextField jtf_temporal_empleados;
    private javax.swing.JTextField jtf_temporal_existencias;
    private javax.swing.JTextField jtf_temporal_producto;
    private javax.swing.JTextField jtf_temporal_tiempos;
    private javax.swing.JTextField jtf_temporal_tiendas;
    // End of variables declaration//GEN-END:variables
}
