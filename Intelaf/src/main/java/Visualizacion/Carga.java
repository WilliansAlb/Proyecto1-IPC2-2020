/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Visualizacion;

import Base.ConectorBD;
import POJOS.ClienteDTO;
import POJOS.EmpleadoDTO;
import POJOS.PedidoDTO;
import POJOS.ProductoDTO;
import POJOS.TiendaDTO;
import Util.Utilidad;
import java.io.File;
import java.io.FileNotFoundException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author yelbetto
 */
public class Carga extends javax.swing.JPanel {

    ConectorBD base = new ConectorBD();
    Resultado siguiente = new Resultado();
    private ArrayList<String> lineas;
    Ventana actual;
    Utilidad utilidad = new Utilidad();

    /**
     * Creates new form Carga
     */
    public Carga(Ventana actual) {
        initComponents();
        this.actual = actual;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jl_carga = new javax.swing.JLabel();
        btn_abrir = new javax.swing.JButton();
        jl_archivo = new javax.swing.JLabel();
        jl_previsualizacion = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jta_archivo = new javax.swing.JTextArea();
        btn_ingresar = new javax.swing.JButton();
        jpb_progreso = new javax.swing.JProgressBar();
        jl_ingresando = new javax.swing.JLabel();

        jl_carga.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jl_carga.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_carga.setText("CARGAR ARCHIVO");

        btn_abrir.setText("ABRIR");
        btn_abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_abrirActionPerformed(evt);
            }
        });

        jl_archivo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_archivo.setText("NO HAS SELECCIONADO NINGUN ARCHIVO");

        jl_previsualizacion.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jl_previsualizacion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jl_previsualizacion.setText("PREVISUALIZACION ARCHIVO");

        jta_archivo.setColumns(20);
        jta_archivo.setRows(5);
        jScrollPane1.setViewportView(jta_archivo);

        btn_ingresar.setText("INGRESAR");
        btn_ingresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ingresarActionPerformed(evt);
            }
        });

        jl_ingresando.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jl_ingresando.setText("\"\"");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jl_carga, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jl_previsualizacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jl_archivo, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_abrir, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jl_ingresando, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jpb_progreso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_ingresar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jl_carga, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_abrir)
                    .addComponent(jl_archivo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jl_previsualizacion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpb_progreso, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_ingresar, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jl_ingresando, javax.swing.GroupLayout.Alignment.TRAILING)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btn_abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_abrirActionPerformed
        Scanner entrada = null;
        JFileChooser fileChooser = new JFileChooser();
        FileFilter filtro = new FileNameExtensionFilter("Archivos de texto (.txt)", "txt");
        fileChooser.setFileFilter(filtro);
        File nuevaRuta = new File("/home/yelbetto/Escritorio/[txts]");
        fileChooser.setCurrentDirectory(nuevaRuta);
        int valor = fileChooser.showOpenDialog(fileChooser);
        if (valor == JFileChooser.APPROVE_OPTION) {
            jta_archivo.setText("");
            lineas = new ArrayList<>();
            String ruta = fileChooser.getSelectedFile().getAbsolutePath();
            try {
                File f = new File(ruta);
                entrada = new Scanner(f);
                while (entrada.hasNext()) {
                    String temp = entrada.nextLine();
                    if (temp.length() > 3) {
                        lineas.add(temp);
                        jta_archivo.setText(jta_archivo.getText() + temp + "\n");
                    }
                }
                jl_archivo.setText(ruta);

            } catch (FileNotFoundException e) {
                System.out.println(e.getMessage());
            } finally {
                if (entrada != null) {
                    entrada.close();
                }
            }
        } else {
            System.out.println("No se ha seleccionado ning√∫n fichero");
        }
    }//GEN-LAST:event_btn_abrirActionPerformed

    private void btn_ingresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ingresarActionPerformed
        for (int i = 0; i < lineas.size(); i++) {
            jpb_progreso.setValue((int) (i / (lineas.size() - 1)) * 100);
            jpb_progreso.validate();
            Object[] fila = new Object[2];
            DefaultTableModel model = (DefaultTableModel) actual.getResultado().getJt_registros().getModel();
            fila[0] = lineas.get(i);
            fila[1] = verificar(lineas.get(i));
            //fila[1] = "prueba";
            model.addRow(fila);
        }
        //this.setVisible(false);
        //actual.getJp_escritorio().add(siguiente);
        //actual.getJp_escritorio().validate();
        actual.mostrar_ingresados();
        actual.iniciar_todo();
    }//GEN-LAST:event_btn_ingresarActionPerformed

    //METODOS QUE VERIFICAN QUE LOS PARAMETROS ESTEN COMPLETOS Y CORRECTOS PARA SER INGRESADOS EN LA BASE DE DATOS
    public String verificar(String detectar1) {
        String detectar = detectar1.toUpperCase();
        if (detectar.contains("TIEMPO,")) {
            return verificar_tiempo(detectar1);
        } else if (detectar.contains("TIENDA,")) {
            return verificar_tienda(detectar1);
        } else if (detectar.contains("PEDIDO,")) {
            return verificar_pedido(detectar1);
        } else if (detectar.contains("CLIENTE")) {
            return verificar_cliente(detectar1);
        } else if (detectar.contains("PRODUCTO")) {
            return verificar_producto(detectar1);
        } else if (detectar.contains("EMPLEADO")) {
            return verificar_empleado(detectar1);
        } else {
            return "ERROR";
        }
    }

    public String verificar_tienda(String linea) {
        ArrayList<Integer> tp = encontrar_comas(linea);
        ArrayList<String> parametros;
        if (tp.size() == 4) {
            parametros = extraer_parametros(linea, tp);
            if (parametros.get(0).length() != 0) {
                if (parametros.get(1).length() != 0) {
                    if (verificar_codigo(parametros.get(2))) {
                        if (parametros.get(3).length() != 0) {
                            TiendaDTO nuevo = new TiendaDTO(parametros);
                            return ingresar_tienda(nuevo);
                        } else {
                            return "ERROR: no tiene telefono";
                        }
                    } else {
                        return "ERROR: no tiene codigo valido";
                    }
                } else {
                    return "ERROR: falta direccion";
                }
            } else {
                return "ERROR: falta nombre";
            }
        } else {
            return "ERROR: sobran comas";
        }
    }

    public String verificar_tiempo(String linea) {
        ArrayList<Integer> tp = encontrar_comas(linea);
        ArrayList<String> parametros;
        if (tp.size() == 3) {
            parametros = extraer_parametros(linea, tp);
            if (verificar_codigo(parametros.get(0)) && verificar_codigo(parametros.get(1))) {
                if (verificar_numero(parametros.get(2))) {
                    return ingresar_tiempo(parametros.get(0), parametros.get(1), Integer.parseInt(parametros.get(2)));
                } else {
                    return "ERROR: no tiene horas validas";
                }
            } else {
                return "ERROR: el codigo es incorrecto";
            }
        } else {
            return "ERROR: sobran comas";
        }
    }

    public String verificar_producto(String linea) {
        ArrayList<Integer> tp = encontrar_comas(linea);
        ArrayList<String> parametros;
        if (tp.size() == 6) {
            parametros = extraer_parametros(linea, tp);
            if (parametros.get(0).length() != 0) {
                if (parametros.get(1).length() != 0) {
                    if (verificar_codigo(parametros.get(2))) {
                        if (verificar_numero(parametros.get(3))) {
                            if (verificar_precio(parametros.get(4))) {
                                if (verificar_codigo(parametros.get(5))) {
                                    ProductoDTO producto = new ProductoDTO(parametros);
                                    return ingresar_producto(producto);
                                } else {
                                    return "ERROR: precio incorrecto";
                                }
                            } else {
                                return "ERROR: no tiene codigo valido 2";
                            }
                        } else {
                            return "ERROR: no tiene telefono";
                        }
                    } else {
                        return "ERROR: no tiene codigo valido 1";
                    }
                } else {
                    return "ERROR: falta direccion";
                }
            } else {
                return "ERROR: falta nombre";
            }
        } else {
            return "ERROR: sobran comas";
        }
    }

    public String verificar_pedido(String linea) {
        ArrayList<Integer> tp = encontrar_comas(linea);
        ArrayList<String> parametros;
        if (tp.size() == 9) {
            parametros = extraer_parametros(linea, tp);
            if (verificar_numero(parametros.get(0))) {
                if (verificar_codigo(parametros.get(1))) {
                    if (verificar_codigo(parametros.get(2))) {
                        if (verificar_fecha(parametros.get(3))) {
                            if (verificar_nit(parametros.get(4))) {
                                if (verificar_codigo(parametros.get(5))) {
                                    if (verificar_numero(parametros.get(6))) {
                                        if (verificar_precio(parametros.get(7))) {
                                            if (verificar_precio(parametros.get(8))) {
                                                PedidoDTO nuevo = new PedidoDTO(parametros);
                                                return ingresar_pedido(nuevo);
                                            } else {
                                                return "ERROR: no es un anticipo incorrecto";
                                            }
                                        } else {
                                            return "ERROR: no es un precio correcto";
                                        }
                                    } else {
                                        return "ERROR: cantidad incorrecta";
                                    }
                                } else {
                                    return "ERROR: precio incorrecto";
                                }
                            } else {
                                return "ERROR: no tiene codigo valido 2";
                            }
                        } else {
                            return "ERROR: no tiene telefono";
                        }
                    } else {
                        return "ERROR: no tiene codigo valido 1";
                    }
                } else {
                    return "ERROR: falta direccion";
                }
            } else {
                return "ERROR: falta nombre";
            }
        } else {
            return "ERROR: sobran comas";
        }
    }

    public String verificar_empleado(String linea) {
        ArrayList<Integer> tp = encontrar_comas(linea);
        ArrayList<String> parametros;
        if (tp.size() == 4) {
            parametros = extraer_parametros(linea, tp);
            if (parametros.get(0).length() != 0) {
                if (verificar_numero(parametros.get(1))) {
                    if (verificar_numero(parametros.get(2))) {
                        if (parametros.get(2).length() == 8) {
                            if (verificar_numero(parametros.get(3))) {
                                EmpleadoDTO empleado = new EmpleadoDTO(parametros);
                                return ingresar_empleado(empleado);
                            } else {
                                return "ERROR: no tiene DPI correcto";
                            }
                        } else {
                            return "ERROR: faltan numeros";
                        }
                    } else {
                        return "ERROR: no tiene telefono correcto";
                    }
                } else {
                    return "ERROR: codigo incorrecto";
                }
            } else {
                return "ERROR: falta nombre";
            }
        } else {
            return "ERROR: sobran comas";
        }
    }

    public String verificar_cliente(String linea) {
        ArrayList<Integer> tp = encontrar_comas(linea);
        ArrayList<String> parametros;
        if (tp.size() == 4) {
            parametros = extraer_parametros(linea, tp);
            if (parametros.get(0).length() != 0) {
                if (verificar_nit(parametros.get(1))) {
                    if (verificar_numero(parametros.get(2))) {
                        if (parametros.get(2).length() == 8) {
                            if (verificar_precio(parametros.get(3))) {
                                ClienteDTO cliente = new ClienteDTO(parametros);
                                return ingresar_cliente(cliente);
                            } else {
                                return "ERROR: no es una cantidad de dinero";
                            }
                        } else {
                            return "ERROR: faltan numeros para el telefono";
                        }
                    } else {
                        return "ERROR: no es un numero";
                    }
                } else {
                    return "ERROR: nit incorrecto";
                }
            } else {
                return "ERROR: falta nombre del cliente";
            }
        } else {
            return "ERROR: sobran comas";
        }
    }

    //METODOS QUE INGRESAN LOS PARAMETROS A LA BASE DE DATOS
    public String ingresar_producto(ProductoDTO producto) {
        String estado = "";
        String sql = "";
        if (base.conectar()) {
            sql = "SELECT COUNT(*) AS total FROM Producto WHERE codigo_producto = '" + producto.getCodigo_producto() + "';";
            ResultSet result = base.seleccionar(sql);
            boolean paso = false;
            try {
                while (result.next()) {
                    paso = result.getInt("total") == 0;
                }
            } catch (SQLException ex) {
                return "ERROR: fallo conexion con la base de datos";
            }
            if (paso) {
                sql = "INSERT INTO Producto(codigo_producto,nombre,fabricante,precio) VALUES ('" + producto.getCodigo_producto() + "','" + producto.getNombre() + "','" + producto.getFabricante() + "'," + utilidad.dos_decimales(producto.getPrecio()) + ");";
                if (base.ejecutar(sql)) {
                    estado = ingresar_existencia(producto.getCodigo_producto(), producto.getCodigo_tienda(), producto.getCantidad());
                } else {
                    estado = "ERROR: fallo en la base de datos";
                }
            } else {
                estado = ingresar_existencia(producto.getCodigo_producto(), producto.getCodigo_tienda(), producto.getCantidad());
            }
            base.desconectar();
        } else {
            estado = "ERROR: al conectar la base de datos";
        }
        return estado;
    }

    public String ingresar_existencia(String codigo_producto, String codigo_tienda, int cantidad) {
        String estado = "";
        String sql = "";
        if (base.conectar()) {
            sql = "INSERT INTO Existencia(codigo_producto,codigo_tienda,cantidad) VALUES ('" + codigo_producto + "','" + codigo_tienda + "'," + cantidad + ");";
            if (base.ejecutar(sql)) {
                estado = "PRODUCTO -"+codigo_producto+"- INGRESADO";
            } else {
                estado = "ERROR: fallo en la base de datos";
            }
            base.desconectar();
        } else {
            estado = "ERROR: al conectar la base de datos";
        }
        return estado;
    }

    public String ingresar_solicitado(String codigo_producto, int codigo_pedido, int cantidad, Double total) {
        String estado = "";
        String sql = "";
        if (base.conectar()) {
            sql = "INSERT INTO Solicitado(codigo_producto,codigo_pedido,cantidad,total) VALUES ('" + codigo_producto + "'," + codigo_pedido + "," + cantidad + ", " + utilidad.dos_decimales(total) + ");";
            if (base.ejecutar(sql)) {
                estado = "INGRESADO A LA BASE DE DATOS";
            } else {
                estado = "ERROR: fallo en la base de datos";
            }
            base.desconectar();
        } else {
            estado = "ERROR: al conectar la base de datos";
        }
        return estado;
    }

    public String ingresar_pedido(PedidoDTO pedido) {
        String estado = "";
        String sql = "";
        if (base.conectar()) {
            sql = "SELECT COUNT(*) AS total FROM Pedido WHERE codigo_pedido = " + pedido.getCodigo_pedido() + ";";
            ResultSet result = base.seleccionar(sql);
            boolean paso = false;
            try {
                while (result.next()) {
                    paso = result.getInt("total") == 0;
                }
            } catch (SQLException ex) {
                return "ERROR: fallo con la base de datos";
            }
            if (paso) {
                sql = "INSERT INTO Pedido(codigo_pedido,codigo_tienda1,codigo_tienda2,fecha,nit,anticipo,entregado) VALUES (" + pedido.getCodigo_pedido() + ",'" + pedido.getCodigo_tienda1() + "','" + pedido.getCodigo_tienda2() + "','" + pedido.getFecha() + "','" + pedido.getNit() + "'," + pedido.getAnticipo() + "," + false + ");";
                if (base.ejecutar(sql)) {
                    estado = ingresar_solicitado(pedido.getCodigo_producto(), pedido.getCodigo_pedido(), pedido.getCantidad(), pedido.getTotal());
                } else {
                    estado = "ERROR: fallo en la base de datos";
                }
            } else {
                estado = ingresar_solicitado(pedido.getCodigo_producto(), pedido.getCodigo_pedido(), pedido.getCantidad(), pedido.getTotal());
            }
            base.desconectar();
        } else {
            estado = "ERROR: al conectar la base de datos";
        }
        return estado;
    }

    public String ingresar_tienda(TiendaDTO tienda) {
        String estado = "";
        String sql = "";
        if (base.conectar()) {
            sql = "INSERT INTO Tienda(codigo_tienda,nombre,direccion,telefono) VALUES ('" + tienda.getCodigo_tienda() + "','" + tienda.getNombre() + "','" + tienda.getDireccion() + "','" + tienda.getTelefono() + "');";
            if (base.ejecutar(sql)) {
                estado = "INGRESADO A LA BASE DE DATOS";
            } else {
                estado = "ERROR: fallo en la base de datos";
            }
            base.desconectar();
        } else {
            estado = "ERROR: al conectar la base de datos";
        }
        return estado;
    }

    public String ingresar_cliente(ClienteDTO cliente) {
        String estado = "";
        String sql = "";
        if (base.conectar()) {
            sql = "INSERT INTO Cliente(nit,nombre,telefono,credito) VALUES ('" + cliente.getNit() + "','" + cliente.getNombre() + "','" + cliente.getTelefono() + "'," + cliente.getCredito() + ");";
            if (base.ejecutar(sql)) {
                estado = "CLIENTE -" + cliente.getNombre() + "- INGRESADO";
            } else {
                estado = "ERROR: fallo en la base de datos";
            }
            base.desconectar();
        } else {
            estado = "ERROR: al conectar la base de datos";
        }
        return estado;
    }

    public String ingresar_empleado(EmpleadoDTO empleado) {
        String estado = "";
        String sql;
        if (base.conectar()) {
            sql = "INSERT INTO Empleado(codigo_empleado,nombre,telefono,dpi) VALUES ('" + empleado.getCodigo_empleado() + "','" + empleado.getNombre() + "','" + empleado.getTelefono() + "','" + empleado.getDpi() + "');";
            if (base.ejecutar(sql)) {
                estado = "EMPLEADO -" + empleado.getNombre() + "- INGRESADO";
            } else {
                estado = "ERROR: fallo en la base de datos";
            }
            base.desconectar();
        } else {
            estado = "ERROR: al conectar la base de datos";
        }
        return estado;
    }

    public String ingresar_tiempo(String codigo_tienda1, String codigo_tienda2, int horas) {
        String estado = "";
        String sql = "";
        if (base.conectar()) {
            sql = "INSERT INTO Tiempo(codigo_tienda1,codigo_tienda2,dias) VALUES ('" + codigo_tienda1 + "','" + codigo_tienda2 + "'," + horas + ");";
            if (base.ejecutar(sql)) {
                estado = "TIEMPO ENTRE TIENDAS -" + codigo_tienda1 + " y " + codigo_tienda2 + "- INGRESADO";
            } else {
                estado = "ERROR: fallo en la base de datos";
            }
            base.desconectar();
        } else {
            estado = "ERROR: al conectar la base de datos";
        }
        return estado;
    }

    //METODOS QUE SOLO VERIFICAN QUE LOS PARAMETROS EST√âN CORRECTOS PARA SER INGRESADOS EN LA BASE DE DATOS
    public ArrayList<String> extraer_parametros(String linea, ArrayList<Integer> comas) {
        String temporal = "";
        ArrayList<String> parametros = new ArrayList<>();
        for (int i = 0; i < comas.size(); i++) {
            if (i != (comas.size() - 1)) {
                for (int o = (comas.get(i) + 1); o < comas.get(i + 1); o++) {
                    temporal += linea.charAt(o);
                }
                parametros.add(temporal);
            } else {
                for (int o = (comas.get(i) + 1); o < linea.length(); o++) {
                    temporal += linea.charAt(o);
                }
                parametros.add(temporal);
            }
            temporal = "";
        }
        return parametros;
    }

    public ArrayList<Integer> encontrar_comas(String linea) {
        ArrayList<Integer> numero = new ArrayList<>();
        for (int i = 0; i < linea.length(); i++) {
            if (linea.charAt(i) == ',') {
                numero.add(i);
            }
        }
        return numero;
    }

    public boolean verificar_numero(String numero) {
        boolean es_numero = true;
        for (int i = 0; i < numero.length(); i++) {
            char numero1 = numero.charAt(i);
            if (!Character.isDigit(numero1)) {
                es_numero = false;
                break;
            }
        }
        return es_numero;
    }

    public boolean verificar_precio(String precio) {
        int puntos = 0;
        boolean precio_correcto = true;

        for (int i = 0; i < precio.length(); i++) {
            char caracter = precio.charAt(i);
            if (!Character.isDigit(caracter)) {
                if (caracter != '.') {
                    precio_correcto = false;
                } else {
                    puntos++;
                }
            }
        }
        if (puntos == 1 || puntos == 0) {
            return precio_correcto;
        } else {
            return false;
        }
    }

    public boolean verificar_fecha(String fecha) {
        String fecha_sin_espacios = fecha.trim();
        boolean fecha_correcta = true;
        boolean retorno = false;
        int guiones = 0;
        for (int i = 0; i < fecha_sin_espacios.length(); i++) {
            char caracter = fecha_sin_espacios.charAt(i);
            if (!Character.isDigit(caracter)) {
                if (caracter != '-') {
                    fecha_correcta = false;
                } else {
                    guiones++;
                }
            }
        }
        if (fecha_correcta && guiones == 2) {
            if (fecha_sin_espacios.charAt(4) == '-' && fecha_sin_espacios.charAt(7) == '-') {
                retorno = true;
            }
        }
        return retorno;
    }

    public boolean verificar_nit(String nit) {
        int guiones = 0;
        boolean nit_correcto = true;

        for (int i = 0; i < nit.length(); i++) {
            char caracter = nit.charAt(i);
            if (!Character.isDigit(caracter)) {
                if (!Character.isLetter(caracter)) {
                    if (caracter != '-') {
                        nit_correcto = false;
                        break;
                    }
                }
            }
        }
        if (guiones == 1 || guiones == 0) {
            return nit_correcto;
        } else {
            return false;
        }
    }

    public boolean verificar_codigo(String codigo) {
        int guiones = 0;
        int posicion = 0;
        boolean letras_correctas = true;
        for (int i = 0; i < codigo.length(); i++) {
            if (codigo.charAt(i) == '-') {
                posicion = i;
                guiones++;
            }
        }
        if (guiones == 1) {
            for (int i = 0; i < posicion; i++) {
                char caracter = codigo.charAt(i);
                if (!Character.isLetter(caracter)) {
                    letras_correctas = false;
                    break;
                }
            }
            if (letras_correctas) {
                for (int i = (posicion + 1); i < codigo.length(); i++) {
                    char numero = codigo.charAt(i);
                    if (!Character.isDigit(numero)) {
                        letras_correctas = false;
                        break;
                    }
                }
            }
        } else {
            letras_correctas = false;
        }
        return letras_correctas;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_abrir;
    private javax.swing.JButton btn_ingresar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jl_archivo;
    private javax.swing.JLabel jl_carga;
    private javax.swing.JLabel jl_ingresando;
    private javax.swing.JLabel jl_previsualizacion;
    private javax.swing.JProgressBar jpb_progreso;
    private javax.swing.JTextArea jta_archivo;
    // End of variables declaration//GEN-END:variables
}
