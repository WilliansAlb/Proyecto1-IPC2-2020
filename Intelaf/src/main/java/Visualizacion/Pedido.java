/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Visualizacion;

import Base.ClienteDAO;
import Base.ConectorBD;
import Base.ProductoDAO;
import Base.TiendaDAO;
import POJOS.ClienteDTO;
import POJOS.PedidoDTO;
import Util.TextPrompt;
import Util.Utilidad;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author yelbetto
 */
public class Pedido extends javax.swing.JPanel {

    private String tienda_actual;
    private Date fecha_actual;
    ConectorBD base = new ConectorBD();
    ArrayList<PedidoDTO> pedidos_egreso;
    ArrayList<PedidoDTO> pedidos_ingreso;
    ArrayList<PedidoDTO> pedidos_entrega;
    ArrayList<ClienteDTO> clientes = new ArrayList<>();
    Utilidad utilidad = new Utilidad();
    ArrayList<String[]> tiempos;

    /**
     * Creates new form Pedido
     */
    public Pedido() {
        initComponents();
        base = new ConectorBD();
        if (base.conectar()) {

            ProductoDAO pro = new ProductoDAO(base);
            TiendaDAO ti = new TiendaDAO(base);
            ClienteDAO cl = new ClienteDAO(base);
            pedidos_egreso = pro.pedidos_egreso();
            pedidos_ingreso = pro.pedidos_ingreso();
            tiempos = ti.obtener_tiempos();
            pedidos_entrega = pro.pedidos_entrega();
            clientes = cl.obtener_clientes();
        }

        rellenar_tabla_e();
        rellenar_tabla_i();
        rellenar_tabla_entrega();
        TextPrompt tx = new TextPrompt("SE MUESTRAN TODOS LOS PEDIDOS A ENTREGAR", nit);
        tx.changeStyle(2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jt_entregas = new javax.swing.JTable();
        btn_entregar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        nit = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jt_egreso = new javax.swing.JTable();
        btn_egreso = new javax.swing.JButton();
        btn_egresar_todos = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jt_ingreso = new javax.swing.JTable();
        btn_ingresar = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CONTROL PEDIDOS");

        jt_entregas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PEDIDO", "TIENDA SOLICITADO", "NIT", "ANTICIPO", "TOTAL", "FECHA", "ATRASADO"
            }
        ));
        jt_entregas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jt_entregasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jt_entregas);

        btn_entregar.setText("ENTREGAR");
        btn_entregar.setEnabled(false);
        btn_entregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_entregarActionPerformed(evt);
            }
        });

        jLabel2.setText("NIT:");

        nit.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        nit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nitKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_entregar))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nit)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_entregar)
                .addContainerGap())
        );

        jTabbedPane1.addTab("ENTREGA PEDIDO", jPanel1);

        jt_egreso.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PEDIDO", "TIENDA SOLICITADO", "NIT", "ANTICIPO", "TOTAL", "FECHA"
            }
        ));
        jt_egreso.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jt_egresoMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jt_egreso);

        btn_egreso.setText("CONFIRMAR EGRESO");
        btn_egreso.setEnabled(false);
        btn_egreso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_egresoActionPerformed(evt);
            }
        });

        btn_egresar_todos.setText("EGRESAR TODOS");
        btn_egresar_todos.setEnabled(false);
        btn_egresar_todos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_egresar_todosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(btn_egresar_todos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_egreso)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_egreso)
                    .addComponent(btn_egresar_todos))
                .addContainerGap())
        );

        jTabbedPane1.addTab("EGRESO PEDIDO", jPanel2);

        jt_ingreso.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PEDIDO", "TIENDA ORIGEN", "NIT", "ANTICIPO", "TOTAL", "FECHA"
            }
        ));
        jt_ingreso.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jt_ingresoMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jt_ingreso);

        btn_ingresar.setText("INGRESAR PEDIDO");
        btn_ingresar.setEnabled(false);
        btn_ingresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ingresarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_ingresar)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_ingresar)
                .addContainerGap())
        );

        jTabbedPane1.addTab("INGRESO PEDIDO", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jt_egresoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt_egresoMouseClicked
        btn_egreso.setEnabled(jt_egreso.getSelectedRow() != -1);
        btn_egresar_todos.setEnabled(jt_egreso.getSelectedRow() != -1);
    }//GEN-LAST:event_jt_egresoMouseClicked

    private void btn_egresoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_egresoActionPerformed
        int fila = jt_egreso.getSelectedRow();
        int c_pedido = (int) jt_egreso.getValueAt(fila, 0);
        ProductoDAO pro = new ProductoDAO(base);
        if (pro.egresado(c_pedido)) {
            pedidos_egreso = pro.pedidos_egreso();
            rellenar_tabla_e();
            btn_egreso.setEnabled(false);
            btn_egresar_todos.setEnabled(jt_egreso.getRowCount() > 0);
        } else {
            utilidad.informar(null, "ERROR: no se pudo actualizar el registro", "EGRESO PEDIDO");
        }
    }//GEN-LAST:event_btn_egresoActionPerformed

    private void btn_egresar_todosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_egresar_todosActionPerformed
        int con = jt_egreso.getRowCount();
        JTable nueva = jt_egreso;
        for (int i = 0; i < con; i++) {
            int c_pedido = (int) nueva.getValueAt(i, 0);
            ProductoDAO pro = new ProductoDAO(base);
            if (pro.egresado(c_pedido)) {
                pedidos_egreso = pro.pedidos_egreso();
            } else {
                utilidad.informar(null, "ERROR: no se pudo actualizar el registro", "EGRESO PEDIDO");
                break;
            }
        }
        rellenar_tabla_e();
        if (jt_egreso.getRowCount() > 0) {
            utilidad.informar(null, "HUBO INCONVENIENTES CON ALGUNOS PEDIDOS, INTENTA DE NUEVO", "EGRESO PEDIDO");
        } else {
            utilidad.informar(null, "FUERON EGRESADOS TODOS LOS PRODUCTOS CONFORME A LOS PEDIDOS", "EGRESO PEDIDO");
        }
    }//GEN-LAST:event_btn_egresar_todosActionPerformed

    private void jt_ingresoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt_ingresoMouseClicked
        btn_ingresar.setEnabled(jt_ingreso.getSelectedRow() != -1);
    }//GEN-LAST:event_jt_ingresoMouseClicked

    private void btn_ingresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ingresarActionPerformed
        int fila = jt_ingreso.getSelectedRow();

        int c_pedido = (int) jt_ingreso.getValueAt(fila, 0);

        PedidoDTO pe = pdto(c_pedido);
        Date pe1 = pe.getFecha2();
        Date pe2 = getFecha_actual();
        int dias = dias(pe.getCodigo_tienda1(), pe.getCodigo_tienda2());

        int dias_entre = utilidad.dias(pe1, pe2);

        int resta = dias - dias_entre;

        ProductoDAO pao = new ProductoDAO(base);
        if (resta < 0) {
            if (pao.ingresado(c_pedido, pe2, true)) {
                utilidad.informar(null, "PEDIDO INGRESADO CORRECTAMENTE CON ATRASO DE " + Math.abs(resta) + " DIAS", "INGRESO PEDIDO");
            } else {
                utilidad.informar(null, "PROBLEMA CON LA BASE DE DATOS, INTENTA DE NUEVO", "INGRESO PEDIDO");
            }

        } else {
            if (pao.ingresado(c_pedido, pe2, false)) {
                utilidad.informar(null, "PEDIDO INGRESADO CORRECTAMENTE, SIN ATRASOS", "INGRESO PEDIDO");
            } else {
                utilidad.informar(null, "PROBLEMA CON LA BASE DE DATOS, INTENTA DE NUEVO", "INGRESO PEDIDO");
            }
        }
    }//GEN-LAST:event_btn_ingresarActionPerformed

    private void btn_entregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_entregarActionPerformed
        int fila = jt_entregas.getSelectedRow();
        int codigo_p = (int) jt_entregas.getValueAt(fila, 0);
        String nit1 = (String) jt_entregas.getValueAt(fila, 2);
        Double anticipo = (Double) jt_entregas.getValueAt(fila, 3);
        Double total = (Double) jt_entregas.getValueAt(fila, 4);
        String boo = (String) jt_entregas.getValueAt(fila, 6);
        Double credito = credito(nit1);
        boolean atrasado = false;
        if (boo.equalsIgnoreCase("SI")) {
            atrasado = true;
        } else {
            atrasado = false;
        }

        if (credito > 0) {
            JPanel jp = new JPanel();
            jp.setLayout(new GridLayout(2, 2));
            JComboBox jcb = new JComboBox(new String[]{"PAGO EN EFECTIVO", "USAR CREDITO"});
            jp.add(new JLabel("Dado que tu credito es Q" + credito + " ."));
            jp.add(new JLabel("Elige tu método de pago:"));
            jp.add(new JLabel("Metodo de pago: "));
            jp.add(jcb);
            JOptionPane.showConfirmDialog(null, jp, "METODO DE PAGO", JOptionPane.OK_OPTION);
            if (jcb.getSelectedItem().toString().equalsIgnoreCase("PAGO EN EFECTIVO")) {
                pago_pedidos(total, nit1, atrasado, codigo_p);
            } else {
                JPanel jp2 = new JPanel();
                JTextField tot = new JTextField(total + "");
                JTextField cred = new JTextField(credito + "");
                tot.setEnabled(false);
                cred.setEnabled(false);
                tot.setHorizontalAlignment(SwingConstants.CENTER);
                cred.setHorizontalAlignment(SwingConstants.CENTER);

                JTextField jt = new JTextField();
                jt.setHorizontalAlignment(SwingConstants.CENTER);
                JTextField jt2 = new JTextField();
                jt2.setHorizontalAlignment(SwingConstants.CENTER);
                TextPrompt tx12 = new TextPrompt("MONTO EFECTIVO", jt);
                TextPrompt tx14 = new TextPrompt("MONTO CREDITO A USAR", jt2);
                JButton cancelar = new JButton("Cancelar");

                JButton continuar = new JButton("Continuar");
                continuar.setEnabled(false);
                tx12.changeStyle(2);
                tx14.changeStyle(2);
                jp2.setLayout(new GridLayout(4, 2));
                jp2.add(new JLabel("TOTAL DE VENTA: ", SwingConstants.CENTER));
                jp2.add(new JLabel("CREDITO DISPONIBLE: ", SwingConstants.CENTER));
                jp2.add(tot);
                jp2.add(cred);
                jp2.add(jt);
                jp2.add(jt2);
                jp2.add(cancelar);
                jp2.add(continuar);
                JFrame jf = new JFrame();
                jf.setUndecorated(true);
                jf.setLocationRelativeTo(null);
                jf.setSize(400, 150);
                jf.add(jp2);
                jf.setVisible(true);
                cancelar.addActionListener((ActionEvent ae) -> {
                    jf.setVisible(false);
                    JOptionPane.showMessageDialog(null, new JLabel("No se registro ninguna venta"), "CANCELAR VENTA", JOptionPane.ERROR_MESSAGE);
                });
                Utilidad utilidad = new Utilidad();
                KeyListener key = new KeyListener() {
                    @Override
                    public void keyTyped(KeyEvent ke) {

                    }

                    @Override
                    public void keyPressed(KeyEvent ke) {

                    }

                    @Override
                    public void keyReleased(KeyEvent ke) {
                        String e = jt.getText();
                        String tm = "";
                        char c = ke.getKeyChar();

                        if (ke.getKeyCode() != 8) {
                            if (!Character.isDigit(c)) {
                                if (e.length() > 0) {
                                    for (int i = 0; i < (e.length()); i++) {
                                        if (Character.isDigit(e.charAt(i)) || c == '.') {
                                            tm += e.charAt(i) + "";
                                        }
                                    }
                                    jt.setText(tm);
                                    comprobar(tm);
                                } else {
                                    jt.setText("0");
                                    comprobar(e);
                                }
                            } else {
                                comprobar(e);
                            }
                        } else {
                            comprobar(e);
                        }
                    }

                    public void comprobar(String tm) {
                        String ef = jt.getText();
                        String f = jt2.getText();
                        Double eff = 0.0;
                        Double ff = 0.0;
                        if (!ef.isEmpty()) {
                            eff = Double.parseDouble(ef);
                        }
                        if (!f.isEmpty()) {
                            ff = Double.parseDouble(f);
                        }
                        Double a = total - (eff + ff);
                        Double b = credito - ff;
                        tot.setText(a + "");
                        cred.setText(b + "");
                        nit.setText(b + "");
                        if ((total <= (eff + ff)) && (credito >= ff)) {
                            continuar.setEnabled(true);
                        } else {
                            if (credito < ff) {
                                jt2.setForeground(Color.red);
                            } else {
                                jt2.setForeground(Color.black);
                            }
                            continuar.setEnabled(false);
                        }
                    }
                };

                KeyListener key2 = new KeyListener() {
                    @Override
                    public void keyTyped(KeyEvent ke) {

                    }

                    @Override
                    public void keyPressed(KeyEvent ke) {

                    }

                    @Override
                    public void keyReleased(KeyEvent ke) {

                        String e = jt2.getText();
                        String tm = "";
                        char c = ke.getKeyChar();

                        if (ke.getKeyCode() != 8) {
                            if (!Character.isDigit(c)) {
                                if (e.length() > 0) {
                                    for (int i = 0; i < (e.length()); i++) {
                                        if (Character.isDigit(e.charAt(i)) || c == '.') {
                                            tm += e.charAt(i) + "";
                                        }
                                    }
                                    jt2.setText(tm);
                                    comprobar(tm);
                                } else {
                                    jt2.setText("0");
                                    comprobar(e);
                                }
                            } else {
                                comprobar(e);
                            }
                        } else {
                            comprobar(e);
                        }
                    }

                    public void comprobar(String tm) {
                        String ef = jt.getText();
                        String f = jt2.getText();
                        Double eff = 0.0;
                        Double ff = 0.0;
                        if (!ef.isEmpty()) {
                            eff = Double.parseDouble(ef);
                        }
                        if (!f.isEmpty()) {
                            ff = Double.parseDouble(f);
                        }
                        Double a = total - (eff + ff);
                        Double b = credito - ff;
                        tot.setText(a + "");
                        cred.setText(b + "");
                        nit.setText(b + "");
                        if ((total <= (eff + ff)) && (credito >= ff)) {
                            continuar.setEnabled(true);
                        } else {
                            if (credito < ff) {
                                jt2.setForeground(Color.red);
                            } else {
                                jt2.setForeground(Color.black);
                            }
                            continuar.setEnabled(false);
                        }
                    }
                };

                continuar.addActionListener((ActionEvent ae) -> {
                    //Double actual_c = Double.parseDouble(cred.getText());
                    //ClienteDAO cliente = new ClienteDAO(base);
                    //venta(Double.parseDouble(jtf_credito.getText()));

                    //completar_entrega(nit1, total, credito, codigo_p, atrasado);
                    jf.setVisible(false);

                });
                jt.addKeyListener(key);
                jt2.addKeyListener(key2);
                //JOptionPane.showConfirmDialog(null, jp2, "METODO DE PAGO", JOptionPane.OK_OPTION);

            }
        } else {
            Utilidad ut = new Utilidad();
            ut.informar(null, "Dado que el cliente no tiene credito, solo se puede pagar con efectivo", "METODO DE PAGO");
            pago_pedidos(total, nit1, atrasado, codigo_p);
        }


    }//GEN-LAST:event_btn_entregarActionPerformed

    private void nitKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nitKeyReleased
        rellenar_tabla_entrega(nit.getText());
    }//GEN-LAST:event_nitKeyReleased

    private void jt_entregasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt_entregasMouseClicked
        btn_entregar.setEnabled(jt_entregas.getRowCount() > 0);
    }//GEN-LAST:event_jt_entregasMouseClicked

    public void pago_pedidos(Double total_venta, String nit1, boolean atrasado, int codigo_pedido) {
        JPanel jp2 = new JPanel();
        JTextField tot = new JTextField(total_venta + "");
        tot.setEnabled(false);
        tot.setHorizontalAlignment(SwingConstants.CENTER);

        JTextField jt = new JTextField();
        jt.setHorizontalAlignment(SwingConstants.CENTER);
        TextPrompt tx12 = new TextPrompt("MONTO EFECTIVO", jt);
        JButton cancelar = new JButton("Cancelar");

        JButton continuar = new JButton("Continuar");
        continuar.setEnabled(false);
        tx12.changeStyle(2);
        jp2.setLayout(new GridLayout(3, 2));
        jp2.add(new JLabel("TOTAL DE VENTA: ", SwingConstants.CENTER));
        jp2.add(tot);
        jp2.add(new JLabel("EFECTIVO: ", SwingConstants.CENTER));
        jp2.add(jt);
        jp2.add(cancelar);
        jp2.add(continuar);
        JFrame jf = new JFrame();
        jf.setUndecorated(true);
        jf.setLocationRelativeTo(null);
        jf.setSize(400, 150);
        jf.add(jp2);
        jf.setVisible(true);
        cancelar.addActionListener((ActionEvent ae) -> {
            jf.setVisible(false);
            JOptionPane.showMessageDialog(null, new JLabel("No se registro ninguna venta"), "CANCELAR VENTA", JOptionPane.ERROR_MESSAGE);
        });
        Double cambio = 0.0;
        KeyListener key = new KeyListener() {
            @Override
            public void keyTyped(KeyEvent ke) {

            }

            @Override
            public void keyPressed(KeyEvent ke) {

            }

            @Override
            public void keyReleased(KeyEvent ke) {
                String e = jt.getText();
                String tm = "";
                char c = ke.getKeyChar();

                if (ke.getKeyCode() != 8) {
                    if (!Character.isDigit(c)) {
                        if (e.length() > 0) {
                            for (int i = 0; i < (e.length()); i++) {
                                if (Character.isDigit(e.charAt(i)) || c == '.') {
                                    tm += e.charAt(i) + "";
                                }
                            }
                            jt.setText(tm);
                            comprobar(tm);
                        } else {
                            jt.setText("0");
                            comprobar(e);
                        }
                    } else {
                        comprobar(e);
                    }
                } else {
                    comprobar(e);
                }
            }

            public void comprobar(String tm) {
                String ef = jt.getText();
                Double eff = 0.0;
                if (!ef.isEmpty()) {
                    eff = Double.parseDouble(ef);
                }
                Double a = total_venta - eff;
                tot.setText(a + "");
                nit.setText(a + "");
                if (total_venta <= eff) {
                    continuar.setEnabled(true);
                } else {
                    continuar.setEnabled(false);
                }
            }
        };
        jt.addKeyListener(key);
        continuar.addActionListener((ActionEvent ae) -> {
            Double tot1 = Double.parseDouble(nit.getText());
            jf.setVisible(false);
            if ((total_venta - tot1) < 0) {
                Double t = total_venta - tot1;
                utilidad.informar(null, "El cambio para el cliente es de: " + Math.abs(t), "CAMBIO");
            }
            Double cre = Double.parseDouble(nit.getText());
            completar_entrega(nit1, total_venta, cre, codigo_pedido, atrasado);
        });
    }

    public void completar_entrega(String nit, Double total, Double credito, int codigo_pedido,boolean atrasado) {
        ClienteDAO cliente = new ClienteDAO(base);
        ProductoDAO pao = new ProductoDAO(base);
        int ingresado = cliente.crear_factura(getTienda_actual(), nit, getFecha_actual(),
                total, credito);
        if (ingresado != -1) {
            int filas = jt_entregas.getSelectedRow();
            String mensaje = "Los siguientes productos fueron ingresados correctamente: ";
            String[] datos = pao.productos(codigo_pedido);
            for (int i = 0; i < datos.length; i++) {
                if (cliente.ingresar_venta(ingresado, datos[0], Integer.parseInt(datos[1]), Double.parseDouble(datos[2]))) {
                    mensaje += datos[0] + " ";
                }
            }
            utilidad.informar(null, mensaje, "TERMINAR ENTREGA");
        }
        if (atrasado){
            Double suma = total * 0.02;
            if (cliente.actualizar_cliente2(nit, suma)){
                utilidad.informar(null, "DADO QUE HUBO UN RETRASO EN LA ENTREGA, FUE SUMADO EL 2% DEL TOTAL","RETRIBUCION POR TARDANZA");
            } else {
                utilidad.informar(null, "NO SE PUDO ACTUALIZAR BIEN EL CLIENTE","RETRIBUCION POR TARDANZA");
            }
        }
    }

    public String getTienda_actual() {
        return tienda_actual;
    }

    public void setTienda_actual(String tienda_actual) {
        this.tienda_actual = tienda_actual;
    }

    public Date getFecha_actual() {
        return fecha_actual;
    }

    public void setFecha_actual(Date fecha_actual) {
        this.fecha_actual = fecha_actual;
    }

    public void rellenar_tabla_egresados() {
        for (PedidoDTO p : pedidos_egreso) {
            rellenar_egreso(p);
        }
    }

    public Double credito(String nit) {
        Double credito = 0.0;
        for (ClienteDTO c : clientes) {
            if (c.getNit().equalsIgnoreCase(nit.toUpperCase())) {
                credito = c.getCredito();
            }
        }
        return credito;
    }

    public PedidoDTO pdto(int codigo) {
        PedidoDTO ped = null;
        for (PedidoDTO p : pedidos_ingreso) {
            if (p.getCodigo_pedido() == codigo) {
                ped = p;
                break;
            }
        }
        return ped;
    }

    public void rellenar_tabla_e() {
        utilidad.limpiar_tablas(jt_egreso);
        btn_egreso.setEnabled(false);
        for (PedidoDTO p : pedidos_egreso) {
            if (p.getCodigo_tienda2().equalsIgnoreCase(getTienda_actual())) {
                rellenar_egreso(p);
            }
        }
        btn_egresar_todos.setEnabled(jt_egreso.getRowCount() > 0);
    }

    public void rellenar_tabla_i() {
        utilidad.limpiar_tablas(jt_ingreso);
        btn_ingresar.setEnabled(false);
        for (PedidoDTO p : pedidos_ingreso) {
            if (p.getCodigo_tienda1().equalsIgnoreCase(getTienda_actual())) {
                rellenar_ingreso(p);
            }
        }
    }

    public void rellenar_tabla_entrega(String nit) {
        utilidad.limpiar_tablas(jt_entregas);
        btn_entregar.setEnabled(false);
        for (PedidoDTO p : pedidos_entrega) {
            if (p.getCodigo_tienda1().equalsIgnoreCase(getTienda_actual()) && p.getNit().contains(nit.toUpperCase())) {
                rellenar_entrega(p);
            }
        }
    }

    public void rellenar_tabla_entrega() {
        utilidad.limpiar_tablas(jt_entregas);
        btn_entregar.setEnabled(false);
        for (PedidoDTO p : pedidos_entrega) {
            if (p.getCodigo_tienda1().equalsIgnoreCase(getTienda_actual())) {
                rellenar_entrega(p);
            }
        }
    }

    public void rellenar_entrega(PedidoDTO pedi) {
        Object[] fila = new Object[7];
        DefaultTableModel model = (DefaultTableModel) jt_entregas.getModel();
        fila[0] = pedi.getCodigo_pedido();
        fila[1] = pedi.getCodigo_tienda1();
        fila[2] = pedi.getNit();
        fila[3] = pedi.getAnticipo();
        fila[4] = pedi.getTotal();
        fila[5] = pedi.getFecha2();
        if (pedi.isAtrasado()) {
            fila[6] = "SI";
        } else {
            fila[6] = "NO";
        }
        model.addRow(fila);
    }

    public void rellenar_egreso(PedidoDTO pedi) {
        Object[] fila = new Object[6];
        DefaultTableModel model = (DefaultTableModel) jt_egreso.getModel();
        fila[0] = pedi.getCodigo_pedido();
        fila[1] = pedi.getCodigo_tienda1();
        fila[2] = pedi.getNit();
        fila[3] = pedi.getAnticipo();
        fila[4] = pedi.getTotal();
        fila[5] = pedi.getFecha2();
        model.addRow(fila);
    }

    public void rellenar_ingreso(PedidoDTO pedi) {
        Object[] fila = new Object[6];
        DefaultTableModel model = (DefaultTableModel) jt_ingreso.getModel();
        fila[0] = pedi.getCodigo_pedido();
        fila[1] = pedi.getCodigo_tienda2();
        fila[2] = pedi.getNit();
        fila[3] = pedi.getAnticipo();
        fila[4] = pedi.getTotal();
        fila[5] = pedi.getFecha2();
        model.addRow(fila);
    }

    public int dias(String codigo_tienda1, String codigo_tienda2) {
        int dias = -1;
        for (String[] s : tiempos) {
            if ((s[0].equalsIgnoreCase(codigo_tienda1) || s[1].equalsIgnoreCase(codigo_tienda1)) && (s[0].equalsIgnoreCase(codigo_tienda2) || s[1].equalsIgnoreCase(codigo_tienda2))) {
                dias = Integer.parseInt(s[2]);
                break;
            }
        }
        return dias;
    }
    public void actualizar(){
            ProductoDAO pro = new ProductoDAO(base);
            TiendaDAO ti = new TiendaDAO(base);
            ClienteDAO cl = new ClienteDAO(base);
            pedidos_egreso = pro.pedidos_egreso();
            pedidos_ingreso = pro.pedidos_ingreso();
            tiempos = ti.obtener_tiempos();
            pedidos_entrega = pro.pedidos_entrega();
            clientes = cl.obtener_clientes();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_egresar_todos;
    private javax.swing.JButton btn_egreso;
    private javax.swing.JButton btn_entregar;
    private javax.swing.JButton btn_ingresar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jt_egreso;
    private javax.swing.JTable jt_entregas;
    private javax.swing.JTable jt_ingreso;
    private javax.swing.JTextField nit;
    // End of variables declaration//GEN-END:variables
}
